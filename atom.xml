<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tanzhijian.org</title>
  <id>https://tanzhijian.org/atom.xml</id>
  <updated>2024-02-27T21:54:50Z</updated>
  <link href="tanzhijian.org"/>
  <link href="https://tanzhijian.org/atom.xml" rel="self"/>
  <generator>?</generator>
  <entry>
    <title>fusion-stat 能否使用可读性 id</title>
    <link href="https://tanzhijian.org/posts/fusion_stat_id_explore"></link>
    <id>1709042090.1353555</id>
    <updated>2024-02-27T21:54:50Z</updated>
    <published>2024-02-27T21:54:50Z</published>
    <author><name>tanzhijian</name></author>
    <summary>fusion-stat 的 0.0.6 版本更新计划中曾有一项是所有的 id 具有可读性，在我看来是一项能很大提升使用体验的特性，目前的主流数据应用中，都是采用随机或顺序生成的 "id" 类型的 id，比如 Arsenal, fotmob 是 9825, fbref 是 18bb7c10，transfermarkt 是 11。这反映在 url 查询中则是 https://fbref.com/en/squads/18bb7c10/Arsenal-Stats, https://www.transfermarkt.com/fc-arsenal/startseite/verein/11, 虽说添加了名字在 url 中提升可读性，但名字并不是查询的必要条件，真正的查询是通过 id，所以如果能在 id 中实现既有唯一性，又有可读性，就能很好的改善，甚至还可以拼写出 id。
</summary>
    <content type="html">
      <h1>fusion-stat 能否使用可读性 id</h1>
<p>fusion-stat 的 0.0.6 版本更新计划中曾有一项是所有的 id 具有可读性，在我看来是一项能很大提升使用体验的特性，目前的主流数据应用中，都是采用随机或顺序生成的 &quot;id&quot; 类型的 id，比如 Arsenal, fotmob 是 9825, fbref 是 18bb7c10，transfermarkt 是 11。这反映在 url 查询中则是 https://fbref.com/en/squads/18bb7c10/Arsenal-Stats, https://www.transfermarkt.com/fc-arsenal/startseite/verein/11, 虽说添加了名字在 url 中提升可读性，但名字并不是查询的必要条件，真正的查询是通过 id，所以如果能在 id 中实现既有唯一性，又有可读性，就能很好的改善，甚至还可以拼写出 id。</p>
<p>要实现这样的 id，需要探讨两个问题，第一，能不能设计出设计出这样的 id，第二，能不能在 fusion-stat 中顺利实装。</p>
<p>fusion-stat 目前模型以及相互关系是这样的：</p>
<pre><code class="language-python">class Competition:
    teams: list[Team]
    matches: list[Match]


class Team:
    staffs: list[Staff]
    players: list[Player]


class Staff:
    team: Team
    competition: Competition


class Player:
    team: Team
    competition: Competition


class Match:
    competition: Competition
    home: Team
    away: Team
</code></pre>
<p>而要考虑的因素：</p>
<ol>
<li>唯一</li>
<li>可读</li>
<li>尽可能的固定</li>
<li>相互关系中的一致</li>
</ol>
<p>首先是 competition, 赛事的名字不具有唯一性，比如在 fotmob 搜索 Premier League, 会得到 10 个以上的结果，但通常在一个足协单位内，赛事名称是具有唯一性的，比如英格兰的赛事就只有一个 Premier League，使用赛事名字和地区的组合便可用作 competition 的 id，ENG_Premier-League 这样的字符串具有可读性，而赛事名字和赛事地区都是很容易获取的特征，相互关系的一致也能保证。</p>
<p>然后是 team，与 competition 一样，这个世界上可能会有几个 Arsenel，但英格兰内只有一个 Arsenal，所以采用 ENG_Arsenal 这样的字符串作为 id 也是可行的。</p>
<p>接下来是 staff 和 player，名字不具有唯一性，所属俱乐部随着转会经常会变，甚至国籍也有可能更换。出生地是个不错的特征，但通常不能在 team 的数据源内找到，从而无法保证上下文一致，所以能采用的是名字 + 生日，比如 2001-09-05_Bukayo-Saka，同一天生日的人是否具有同名，放在世界范围内可能有很多，但放在球员里面可能就是很小概率的事件了，暂且把它当作可行。</p>
<p>最后是 match, 比赛日期 + 主队 + 客队名字，比如 2023-09-03_Crystal_Palace_vs_Wolverhampton_Wanderers, 和上面 team 讨论的一样，可能会 or, 但是 and 的概率很小，可以当作可行。</p>
<p>下面就是添加到 fusion-stat。country_name 和 country_code 各个数据源使用不一致，在写了 fifacodes 之后可以很好的解决。</p>
<p>后面的工作就没那么好进行下去了，上一级获取下一级的数据可以做到，最主要还是卡在了如何在下一级的数据中获取到上一级一致的特征。比如在 match 中需要获取 competition 和 team 所有的 id 特征，名字是基本特征容易获取到，但国家在目前的数据源内并不能找全，诚然目前可以把 competition 的国家用在 team，但之后添加了洲际比赛，世界级比赛，国家队比赛，这些就没办法使用了。</p>
<p>最终还是放弃了在 0.0.6 版本中更新 id，有可行性，但以目前的数据广度还不能实装，且 player 级的唯一性还需进一步优化，只能在未来不断扩展新的数据源中重点考虑这些特征直到全部可用了。</p>

    </content>
  </entry>
  <entry>
    <title>介绍一下 fifacodes</title>
    <link href="https://tanzhijian.org/posts/fifacodes_intro"></link>
    <id>1705496359.0520616</id>
    <updated>2024-01-17T20:59:19Z</updated>
    <published>2024-01-17T20:59:19Z</published>
    <author><name>tanzhijian</name></author>
    <summary>fusion-stat 的开发过程有很多国家名称和国家代码转换的场景，一些数据源是使用国家名称，另外一些使用国家代码，在使用时需要那么一个工具来统一他们。最开始打算使用 pycountry, 但对于足球数据来说大多是使用国际足联成员国的国家地区来区分，而国际足联国家代码与 ISO 3166-1 三位字母代码是有差异的，比如使用英格兰 ENG 而不是英国 GBR。搜索了一下并没有现成的工具，只能自己写一个。
</summary>
    <content type="html">
      <h1>介绍一下 fifacodes</h1>
<p>fusion-stat 的开发过程有很多国家名称和国家代码转换的场景，一些数据源是使用国家名称，另外一些使用国家代码，在使用时需要那么一个工具来统一他们。最开始打算使用 pycountry, 但对于足球数据来说大多是使用国际足联成员国的国家地区来区分，而国际足联国家代码与 ISO 3166-1 三位字母代码是有差异的，比如使用英格兰 ENG 而不是英国 GBR。搜索了一下并没有现成的工具，只能自己写一个。</p>
<p>首先是数据源，维基百科有现成的表，爬下来即可。但直接使用有个问题是，国家代码是标准的，数据源与数据源的国家名称不一定是标准的，比如我国，大多数数据源是 China，一小部分是 China PR，以至于还需要一个 custom 来添加更多的别名，所幸两百多个国际足联成员国数量并不大，有了基础数据之后，这个 custom 采用手工维护即可。</p>
<p>接下来是方法了，我的设想是，整个国家代码和名称可以抽象成一个 Counties 类，而这个类本质上是一个只读 dict，可以通过 dict 的所有方法索引查询到一个包含代码和名称的 Country 类。</p>
<p>而索引可以并不只限于代码，它的数据特殊性在于，代码是唯一的，名称是唯一的，同时代码与名称之间也是唯一的，所以可以把他们全部添加为索引，既可以用代码也可以用名称，像这样:</p>
<pre><code class="language-pycon">&gt;&gt;&gt; counties.get(&#x27;ENG&#x27;)
Country(code=&#x27;ENG&#x27;, name=&#x27;England&#x27;)
&gt;&gt;&gt; counties[&#x27;England&#x27;]
Country(code=&#x27;ENG&#x27;, name=&#x27;England&#x27;)
</code></pre>
<p>这样使用起来可以不论数据源是使用何种识别方式，都能很好的处理。但由于代码和名称同时在索引内，使用一些迭代方法的时候会出现重复的 value，所以最简单的方法便是使用两个 dict，使用 getitem 的方法时用 key + value 的 dict，使用 iter 时用只有 key 的 dict。</p>
<p>同时还有一个搜索方法，使用 rapidfuzz 来实现 key 的搜索，如果不确定准确的 key，输入一部分也可以获得结果：</p>
<pre><code class="language-pycon">&gt;&gt;&gt; counties.search(&#x27;ARG&#x27;)
[Country(code=&#x27;ARG&#x27;, name=&#x27;Argentina&#x27;), Country(code=&#x27;AFG&#x27;, name=&#x27;Afghanistan&#x27;), Country(code=&#x27;ALG&#x27;, name=&#x27;Algeria&#x27;)]
&gt;&gt;&gt; counties.search_one(&#x27;Argent&#x27;)
Country(code=&#x27;ARG&#x27;, name=&#x27;Argentina&#x27;)
</code></pre>
<p>一些参数也是可以调节的：</p>
<pre><code class="language-pycon">&gt;&gt;&gt; counties.search(&#x27;Fran&#x27;, limit=2, score_cutoff=70)
[Country(code=&#x27;FRA&#x27;, name=&#x27;France&#x27;), Country(code=&#x27;IRN&#x27;, name=&#x27;Iran&#x27;)]
</code></pre>
<p>基本功能就这些了，已经可以 pip 安装使用。</p>
<p>对于数据的更新，我的设想是默认的基础数据只通过脚本爬取维基百科进行更新，手动维护的 custom 接收 pr 提交，添加的条目代码通常不会有增加，而名称只作为别名添加到索引，返回的 value, Country 仍然使用 default 中的名称，这样比较好规范。</p>

    </content>
  </entry>
  <entry>
    <title>关于在 fusion_stat.models 中使用 shortlist 作为匹配辅助的探讨</title>
    <link href="https://tanzhijian.org/posts/fusion_stat_shortlist"></link>
    <id>1704821742.058141</id>
    <updated>2024-01-10T01:35:42Z</updated>
    <published>2024-01-10T01:35:42Z</published>
    <author><name>tanzhijian</name></author>
    <summary>fusion-stat 有一个一直让我不安的地方，就是在使用 rapidfuzz.process.extractOne 匹配时返回唯一结果的正确性，我并不确定他在扩展越来越多的数据源后能不能继续保持良好的运转，所以一直在探索一些方法解决。而今晚想到一个暂且看上去还不错，但也不是很好的，先上代码吧
</summary>
    <content type="html">
      <h1>关于在 fusion_stat.models 中使用 shortlist 作为匹配辅助的探讨</h1>
<p>fusion-stat 有一个一直让我不安的地方，就是在使用 rapidfuzz.process.extractOne 匹配时返回唯一结果的正确性，我并不确定他在扩展越来越多的数据源后能不能继续保持良好的运转，所以一直在探索一些方法解决。而今晚想到一个暂且看上去还不错，但也不是很好的，先上代码吧</p>
<pre><code class="language-python">import typing
import warnings
from abc import ABC

from rapidfuzz import fuzz, process

_S1 = typing.TypeVar(&#x27;_S1&#x27;)
_S2 = typing.TypeVar(&#x27;_S2&#x27;)


MINIMUM_SIMILARITY = 50
SIMILARITY_DIFFERENCE = 5


class BaseModel(ABC):
    def __init__(self, show_warning: bool = True) -&gt; None:
        self.show_warning = show_warning
        self._shortlist: list[typing.Any] = []

    @property
    def shortlist(self) -&gt; list[typing.Any]:
        return self._shortlist

    def extract(
        self,
        query: _S1,
        choices: list[_S2],
        scorer: typing.Callable[..., int | float] = fuzz.WRatio,
        processor: typing.Callable[..., typing.Sequence[typing.Hashable]]
        | None = None,
        score_cutoff: int | float | None = None,
    ) -&gt; _S2:
        results = process.extract(
            query,
            choices,
            scorer=scorer,
            processor=processor,
            score_cutoff=score_cutoff,
        )

        first = results[0]
        second = results[1] if len(results) &gt; 1 else None
        if first[1] &lt; MINIMUM_SIMILARITY:
            if self.show_warning:
                warnings.warn(
                    (
                        &#x27;The result similarity is less than 50%, &#x27;
                        &#x27;please check the shortlist.&#x27;
                    ),
                    SimilarityWarnings,
                )
            self._shortlist.append((query, results))
        elif (
            second is not None
            and abs(first[1] - second[1]) &lt; SIMILARITY_DIFFERENCE
        ):
            if self.show_warning:
                warnings.warn(
                    (
                        &#x27;There are results that are too similar, &#x27;
                        &#x27;please check the shortlist.&#x27;
                    ),
                    SimilarityWarnings,
                )
            self._shortlist.append((query, results))

        return results[0][0]


class SimilarityWarnings(Warning):
    pass
</code></pre>
<p>我的大致思路是每个 model 都继承 BaseModel 获得 shortlist 和 extract，extract 是对 rapidfuzz.process.extract 的扩写，基本就是通过 rapidfuzz.process.extract 先获得初步结果 results，然后再进行一系列的判定：</p>
<ul>
<li>如果最接近的结果小于 50% 则提示</li>
<li>如果最接近的两个结果过于相似也提示</li>
<li>并把所有的结果放到候选列表 shortlist</li>
<li>最终仍然会返回最接近的结果</li>
</ul>
<p>在使用 rapidfuzz.process.extractOne 的地方替换成使用 self.extract。当然了上面的代码只是一个初步的草稿，并没有考虑太多的条件，数值胡乱设一些，shortlist 也没有封装，但大致思路是，在程序一些不能很好判定的时候，把检查核对交给使用者</p>
<p>但不好的地方在于，fusion-stat 面对的足球数据源通常只有两类：每个数据源都能够一一对应的数据类型，比如赛事，参赛球队，比赛，历史数据；每个数据源不能一一对应上的数据类型，比如球员名单，一些数据源会包含二队，青年队，位置参数，每个数据源对于位置的理解是有差别；而 extractOne 基本是在匹配后一类时会出错，所以 self.extract 并不能成为一个通用方法，而是专用方法</p>
<p>另一个顾虑是，在使用 extractOne 匹配不能一一对应的数据时目前是设置了 score_cutoff 参数一刀切，最小匹配策略，而如果想在这上面优化，默认返回的匹配结果将会是一个很大的问题，因为没有达到标准，如果要返回大概率将会是一个错误的结果，而同时还需要把 shorlist 交给使用者判定，如果使用者没有注意到 shortlist 呢，或者只是想把它跑在一个自动化程序里面并不想每天去观察改动呢</p>
<p>所以原本打算在 0.0.5 使用上这个功能，但又暂时不考虑了</p>

    </content>
  </entry>
  <entry>
    <title>一些读取环境变量的探讨</title>
    <link href="https://tanzhijian.org/posts/explore_env"></link>
    <id>1704024002.7686512</id>
    <updated>2023-12-31T20:00:02Z</updated>
    <published>2023-12-31T20:00:02Z</published>
    <author><name>tanzhijian</name></author>
    <summary>我最早使用，到现在也一直在用的包了，基本覆盖了日常使用的需求，简单，可读性也很好
</summary>
    <content type="html">
      <h1>一些读取环境变量的探讨</h1>
<h2>python-decouple</h2>
<p>我最早使用，到现在也一直在用的包了，基本覆盖了日常使用的需求，简单，可读性也很好</p>
<pre><code class="language-python">def test_decoupe_config() -&gt; None:
    foobar = config(&#x27;FOOBAR&#x27;)
    assert foobar == &#x27;foobar&#x27;

    assert config(&#x27;NUMBER&#x27;) == &#x27;1&#x27;
    assert config(&#x27;NUMBER&#x27;, cast=int) == 1

    with pytest.raises(UndefinedValueError):
        assert not config(&#x27;FOO&#x27;)

    foo = config(&#x27;FOO&#x27;, default=None)
    assert foo is None
</code></pre>
<p>但是它在一些静态工具里面会丢失类型提示，比如 pyright <code>foobar = config(&#x27;FOOBAR&#x27;)</code> 会被推断为类型 <code>bool | Unknown</code>，以至于每次要正确设置类型的时候需要 <code>foobar: str | None = config(&#x27;FOOBAR&#x27;)</code></p>
<p>它的主类 <code>def __call__(self, *args, **kwargs):</code>，也不能支持参数的补全提示</p>
<h2>python-dotenv</h2>
<p>推荐用法之一是统一调用函数 <code>load_dotenv()</code>，它的具体细节是这样：</p>
<pre><code class="language-python">def set_as_environment_variables(self) -&gt; bool:
    &quot;&quot;&quot;
    Load the current dotenv as system environment variable.
    &quot;&quot;&quot;
    if not self.dict():
        return False

    for k, v in self.dict().items():
        if k in os.environ and not self.override:
            continue
        if v is not None:
            os.environ[k] = v

    return True
</code></pre>
<p>把读取到的 .env 通过 <code>os.environ[k] = v</code> 写到环境变量，使用时 <code>os.getenv()</code> 读取即可，好处是使用逻辑比较统一，但我个人并不喜欢这样用，因为会污染到环境变量</p>
<p>不过它提供一个用来专门读取 .env 的函数 dotenv_values</p>
<pre><code class="language-python">def test_dotenv_values() -&gt; None:
    dotenv = dotenv_values(&#x27;.env&#x27;)
    foobar = dotenv[&#x27;FOOBAR&#x27;]
    assert foobar == &#x27;foobar&#x27;

    assert dotenv[&#x27;NUMBER&#x27;] == &#x27;1&#x27;

    with pytest.raises(KeyError):
        assert not dotenv[&#x27;FOO&#x27;]

    foo = dotenv.get(&#x27;FOO&#x27;)
    assert foo is None
</code></pre>
<p>默认是读取 <code>.env</code>，也可以传入其他文件名，返回值是一个 dict，使用就和操作 dict 一样，可以通过 <code>.get</code> 返回 <code>str | None</code>，也可以直接抛出 <code>KeyError</code>，很方便。还可以通过解包的形式读取多个配置以及环境变量</p>
<pre><code class="language-python">config = {
    **dotenv_values(),
    **dotenv_values(&#x27;.env.test&#x27;),
    **os.environ,
}
</code></pre>
<p>缺点是纯手动，也没有自带的类型转换，其实关系不大，无论是简单的还是复杂的转换无非就是自己多写这行代码还是通过参数传入逻辑的区别。也有单个读取 <code>get_key()</code></p>
<pre><code class="language-python">def test_dotenv_get_key() -&gt; None:
    foobar = get_key(&#x27;.env&#x27;, &#x27;FOOBAR&#x27;)
    assert foobar == &#x27;foobar&#x27;

    foo = get_key(&#x27;.env&#x27;, &#x27;FOO&#x27;)
    assert foo is None
</code></pre>
<pre><code class="language-python">def get(key: str) -&gt; str | None:
    if (value := get_key(&#x27;.env&#x27;, key)) is not None:
        return value
    return os.getenv(key)
</code></pre>
<p>缺点还是纯手动。但它依然是使用者最多的包，很适合用来在此基础上开发更多的功能</p>
<h2>pydantic-settings</h2>
<p>pydantic-settings 便是使用了 python-dotenv 支持 .env 读取</p>
<pre><code class="language-python">class Settings(BaseSettings):
    model_config = SettingsConfigDict(
        env_file=&#x27;.env&#x27;,
        env_file_encoding=&#x27;utf-8&#x27;,
    )

    FOOBAR: str | None = None
    NUMBER: int | None = None


def test_pydantic_settings() -&gt; None:
    settings = Settings()
    assert settings.FOOBAR == &#x27;foobar&#x27;
    assert settings.NUMBER == 1
</code></pre>
<p>通过 pydantic 优秀的验证和转换，可以实现很好的类型转换。如果项目中使用了 pydantic 可以优先使用它</p>
<h2>starlette.config</h2>
<p>starlette.config 在我看来是 python-decouple 最完美的替代品了，而且它和 python-decouple 也算是渊源颇深。用法基本一致</p>
<pre><code class="language-python">def test_starlette_config() -&gt; None:
    config = Config(&#x27;.env&#x27;)
    foobar = config(&#x27;FOOBAR&#x27;)
    assert foobar == &#x27;foobar&#x27;

    assert config(&#x27;NUMBER&#x27;) == &#x27;1&#x27;
    assert config(&#x27;NUMBER&#x27;, cast=int) == 1
    assert config(&#x27;NUMBER&#x27;, cast=bool) is True

    with pytest.raises(KeyError):
        assert not config(&#x27;FOO&#x27;)

    foo = config(&#x27;FOO&#x27;, default=None)
    assert foo is None
</code></pre>
<p>类型提示，参数补全的问题被解决掉了，同时它还有一个实现的很有意思的 Secret 类用来读取敏感数据</p>
<pre><code class="language-python">class Secret:
    &quot;&quot;&quot;
    Holds a string value that should not be revealed in tracebacks etc.
    You should cast the value to `str` at the point it is required.
    &quot;&quot;&quot;

    def __init__(self, value: str):
        self._value = value

    def __repr__(self) -&gt; str:
        class_name = self.__class__.__name__
        return f&quot;{class_name}(&#x27;**********&#x27;)&quot;

    def __str__(self) -&gt; str:
        return self._value

    def __bool__(self) -&gt; bool:
        return bool(self._value)
</code></pre>
<pre><code class="language-python">def test_starlette_config_secret() -&gt; None:
    config = Config(&#x27;.env&#x27;)
    secret = config(&#x27;FOOBAR&#x27;, cast=Secret)
    assert repr(secret) == &quot;Secret(&#x27;**********&#x27;)&quot;
    assert str(secret) == &#x27;foobar&#x27;
</code></pre>
<p>没有用加密手段却规避了在调试时的信息泄露。但它的不方便之处在于，不可能为了只使用而安装整个 Starlette。于是大多数时候都是用 python-dotenv 自己写一个读取的类</p>

    </content>
  </entry>
  <entry>
    <title>介绍一下 fusion-stat</title>
    <link href="https://tanzhijian.org/posts/fusion_stat_intro"></link>
    <id>1703233933.8477497</id>
    <updated>2023-12-22T16:32:13Z</updated>
    <published>2023-12-22T16:32:13Z</published>
    <author><name>tanzhijian</name></author>
    <summary>更新：已经更新 API
</summary>
    <content type="html">
      <h1>介绍一下 fusion-stat</h1>
<p>更新：已经更新 API</p>
<hr />
<p>最初只是想给 score-simulator 写一个获取数据的脚本，但写着写着应该可以写成一个工具，可以方便获取网络上免费公开足球数据的爬虫工具，到目前为止可以正常给 score-simulator 提供数据了，于是发布了一个版本到 pip 方便自己使用。</p>
<p>他的特点是同时从不同的数据源获取然后组合在一起。因为这确实是获取足球数据一个很麻烦的事情，从一个数据源获取一些数据，从另一个数据源获取另一些数据，他们大多数基础数据是相同的，只有一些不同的特色数据，而 fusion-stat 便是在获取数据时就把它们最大程度的拼接在一起，通过一次调用就可以获得一份尽可能全面的数据。</p>
<pre><code class="language-python">competitions = Competitions()
fusion = await competitions.gather()
</code></pre>
<p>使用 httpx 完成 downloader 类似的功能，所以提供了可以在初始化时传入 httpx.AsyncClient 的一些参数，比如 <code>competitions = Competitions(proxies=PROXIES)</code>，由于是通过 <code>**kwargs</code>，缺乏参数类型补全提示，后续还会改进。每个类都会初始化一个 AsyncClient 作为 client，如果是大量爬取势必会增加开销，所以还可以提前创建好一个 client 每次传入使用:</p>
<pre><code class="language-python">async with httpx.AsyncClient(proxies=PROXIES) as client:
    competition = Competition(
        fotmob_id=&quot;47&quot;, 
        fbref_id=&quot;9&quot;, 
        fbref_path_name=&quot;Premier-League&quot;,
        official_name=&quot;Premier League&quot;,
        season=2022,
        client=client,
    )
</code></pre>
<p>关于参数，最初的设想是只需要传入一个具有唯一特征同时还有可读性的参数，比如：</p>
<pre><code class="language-python">member = Member(&quot;Bukayo Saka&quot;)
</code></pre>
<p>很漂亮但显然不具有可行性。且不说唯一性，单是如何通过一行字符串到最终完成不同数据源的请求 url 都很困难，如果只是赛事，或者球队，即使规模扩大到很大，几百个赛事，几千支球队，可以通过缓存一份数据来提供查询，但更多的球员名，随时在增加的比赛，就不大可能缓存下来了，这无异于还得提供一个数据库。</p>
<p>所以目前采用这样一种方法，不是很方便手动输入，但可以通过上一级获取到的 index 来使用：</p>
<pre><code class="language-python">fusion = await team.gather()
saka = fusion.members_index()[-2]
saka
</code></pre>
<pre><code>{&#x27;fotmob_id&#x27;: &#x27;961995&#x27;,
 &#x27;fbref_id&#x27;: &#x27;bc7dc64d&#x27;,
 &#x27;fbref_path_name&#x27;: &#x27;Bukayo-Saka&#x27;}
</code></pre>
<pre><code class="language-python">member = Member(**saka)
fusion = await member.gather()
</code></pre>
<p>如果需要长期使用，在第一次获取时本地缓存一份 index，就可以极大的方便后续使用了。</p>
<p>目前数据源只写了很小的一部分，只满足了 score-simulator 的需求，之后会继续完善。如果想要添加更多的数据，或者更多的来源，在 spiders 里面新建一个模块继承 Spider 类，然后实现 request 和 parse:</p>
<pre><code class="language-python">class Futbol(Spider):

    @property
    def request(self) -&gt; httpx.Request:
        ...

    def parse(self, response: httpx.Response) -&gt; Any:
        ...
</code></pre>
<p>可以参考其他的爬虫写法。之后在对应的 fusion 添加进去即可，欢迎提交 pr。</p>
<p>总体来说，目前处于一个能用但不好用的地步。需要改进的地方太多，比如最后的数据类 Fusion，虽然都是 fusion，但方法大相径庭，需要一个更好的方案；models 里面的各种杂乱的数据模型类看起来很糟糕；也没有文档，想要正常使用得看源代码。慢慢写了，最初设计的时候并没有规划太多，大部分都是写一步看一步。</p>

    </content>
  </entry>
  <entry>
    <title>关于在 fusion-stat 中使用 rapidfuzz 匹配名字</title>
    <link href="https://tanzhijian.org/posts/fusion_stat_and_rapidfuzz"></link>
    <id>1697038565.0</id>
    <updated>2023-10-11T23:36:05Z</updated>
    <published>2023-10-11T23:36:05Z</published>
    <author><name>tanzhijian</name></author>
    <summary>最近一有时间就在写一个叫 [fusion-stat](https://github.com/tanzhijian/fusion-stat) 的开源项目，这是我一直想做却一直搁置直到最近才下决心开坑的东西，这个世界上有很多免费公开的足球数据源，每个数据源有相同的数据也有特有的数据，很多时候这些数据都是分散的，fusion-stat 就是想做这么一件事，把各类数据源的不同数据寻找到相关的特征从而把它们匹配连接起来，使得一次调用便可以获取到多个来源的数据，譬如
</summary>
    <content type="html">
      <h1>关于在 fusion-stat 中使用 rapidfuzz 匹配名字</h1>
<p>最近一有时间就在写一个叫 <a href="https://github.com/tanzhijian/fusion-stat">fusion-stat</a> 的开源项目，这是我一直想做却一直搁置直到最近才下决心开坑的东西，这个世界上有很多免费公开的足球数据源，每个数据源有相同的数据也有特有的数据，很多时候这些数据都是分散的，fusion-stat 就是想做这么一件事，把各类数据源的不同数据寻找到相关的特征从而把它们匹配连接起来，使得一次调用便可以获取到多个来源的数据，譬如</p>
<pre><code class="language-python">team = Team(&quot;Arsenal&quot;)
team.get()
team.info
team.players
</code></pre>
<p>输出的数据可以从各个数据来源中填充。</p>
<p>从各个数据源获取到需要的数据并不难，难在如何把它们准确的拼接起来，并不是每个数据源的名称都是一样的，比如 &quot;UEFA Champions League&quot; 与 &quot;Champions League&quot;; &quot;Man United&quot; 与 &quot;Manchester United&quot;, &quot;Manchester Utd&quot;; &quot;Gabriel Dos Santos&quot; 与 &quot;Gabriel&quot;，直观能想到的就是自然语言处理，实体消歧义，实体链接，但用一个机器学习的模型对于这样一个项目太重了，且需要手动来标注校对很多数据，以我一个人的业余时间并不能做到，如果是本地项目可以使用数据库，也不是什么难的事情，对于足球这样的小数据你甚至可以手动拼接很可能效率高于写代码。。。但。。。所以只好想其他的方法，那就先用计算相似度了。</p>
<p>足球数据有一些特有的特征，比如球队，每个赛事内的球队名很难有相似的，且虽然是不同的数据源，但只要是一样的赛事一样的赛季，就一定可以一一对应上的，比如</p>
<pre><code class="language-python">for t1 in teams_1:
    t2 = process.extractOne(t1, teams_2)
    print(f&quot;{t1} is {t2[0]}&quot;)
</code></pre>
<pre><code>Manchester City is Man City
Tottenham Hotspur is Tottenham
Liverpool is Liverpool
West Ham United is West Ham
Arsenal is Arsenal
Brighton &amp; Hove Albion is Brighton
Crystal Palace is Crystal Palace
Brentford is Brentford
Nottingham Forest is Nottm Forest
Aston Villa is Aston Villa
Manchester United is Man United
Chelsea is Chelsea
Fulham is Fulham
Newcastle United is Newcastle
Wolverhampton Wanderers is Wolves
AFC Bournemouth is Bournemouth
Sheffield United is Man United
Everton is Everton
Luton Town is Luton
Burnley is Burnley
</code></pre>
<p>效果很好，但其他的数据，联赛，不同国家之间的联赛名可能会极其相似，比如 意甲联赛叫 Serie A，巴西的联赛也叫 Série A，但加上一些其他特征，比如国家或者地区，每个国家的各级联赛名字基本很难相似；球员名也是，每个球队不可避免的有些球员名之间极为相似，比如阿森纳的 Gabriel，他在 FotMob 的名字是 Gabriel，在 FBref 的名字是 Gabriel Dos Santos，如果只使用名字来做匹配拼接，他俩的相似度不如 Gabriel Jesus，所以需要加上其他的特征，比如目前在 fusion-stat 中使用到的国家和位置</p>
<pre><code class="language-python">def fuzzy_similarity_mean(
    l1: list[str], l2: list[str], **kwargs: typing.Any
) -&gt; float:
    scores = [fuzz.ratio(s1, s2) for s1, s2 in zip(l1, l2)]
    return sum(scores) / len(scores)


process.extractOne(
    [&quot;Gabriel&quot;, &quot;BRA&quot;, &quot;DF&quot;], 
    [
        [&quot;Gabriel Dos Santos&quot;, &quot;BRA&quot;, &quot;DF&quot;],
        [&quot;Gabriel Jesus&quot;, &quot;BRA&quot;, &quot;FW&quot;],
        [&quot;Gabriel Martinelli&quot;, &quot;BRA&quot;, &quot;FW&quot;],
    ],
    scorer=fuzzy_similarity_mean,
)
</code></pre>
<pre><code>([&#x27;Gabriel Dos Santos&#x27;, &#x27;BRA&#x27;, &#x27;DF&#x27;], 85.33333333333333, 0)
</code></pre>
<p>对球员名和赛事并不是每个数据源都是相同的数量，上面提到的 FotMob 和 FBref，一线队名单一个是 25 一个 23，所以需要加上一个预设分数，如果相似度分数低于某个值则判定为两个人不予匹配，我大概设了一个值目前测试下来没什么问题，但也只是暂时，你不能避免万一某一支球队里面有两兄弟，他们名字只差一个字母，出生年月日，国籍，身高，位置都一样。。。需要在日后开发中再改进了。</p>
<p>至少对于目前开放的六个联赛的数据是没问题的。</p>

    </content>
  </entry>
  <entry>
    <title>statsbombpy-local</title>
    <link href="https://tanzhijian.org/posts/statsbombpy_local"></link>
    <id>1694140307.0</id>
    <updated>2023-09-08T10:31:47Z</updated>
    <published>2023-09-08T10:31:47Z</published>
    <author><name>tanzhijian</name></author>
    <summary>更新：已经可以使用 competition_events，competition_frames 读取本地文件，并移除了 requests-mock
</summary>
    <content type="html">
      <h1>statsbombpy-local</h1>
<p>更新：已经可以使用 competition_events，competition_frames 读取本地文件，并移除了 requests-mock</p>
<hr />
<p>最近频繁使用 statsbombpy 获取数据，等待网络请求是件很烦的事情，所以想着改写一下这个库，反正都是在 GitHub 请求公开数据，把它的 open-data 拉到本地，每次从本地读取岂不是很爽。</p>
<p>最开始想着 fork 一个分支直接修改，确实很省事，在 public.py 里添加一个本地读取的函数，然后把使用 requests 的地方换成本地读取，再修改一些配置，设定好本地环境变量，改一下测试通过即可。</p>
<p>但是这样做的缺点是如果主分支每次有新版本都得去合并，由于修改删除的代码处数还不少，合并多了就会很烦，所以还是作罢。不过代码还在，<a href="https://github.com/tanzhijian/statsbombpy-local-old/blob/master/statsbombpy/public.py">statsbombpy-local-old </a>，想用的仍然可以用。</p>
<p>新建一个从外部扩展功能的库，原代码比较烦的一点是全写的函数，而且没有什么接口可以修改到内部，原本想的是像 requests-file 这样通过 file:// URLs 访问本地文件系统</p>
<pre><code class="language-python">s = requests.Session()
s.mount(&#x27;file://&#x27;, FileAdapter())

resp = s.get(&#x27;file:///path/to/file&#x27;)
</code></pre>
<p>又或者继承一个 Requests 类来改写，但原代码</p>
<pre><code class="language-python">def get_response(path):
    response = req.get(path)
    response.raise_for_status()
    data = response.json()
    return data
</code></pre>
<p>这样的写法是摸不到内部，所以只能换一个思路，也就是目前使用的 mock，拦截掉网络请求，从本地本地读取文件后返回请求，但这样的做法可能不是很优雅，因为 mock 通常用于测试。。。</p>
<p>然后就是写。目前可以从 statsbombpy-local 使用 statsbombpy 的所有方法，但只有 competitions, matches, lineups, events 和 frames 从本地读取，其他的几个，player_match_stats，player_season_stats，team_season_stats 需要 key 才能使用，不作考虑保持原样。</p>
<p>而 competition_events，competition_frames，它们的流程是先获取赛事赛季 id，然后获取所有的比赛 id，再获取所有的 events 或者 frames，组一起得到一个 DataFrame。我能做的只是顺着它的思路，获取到赛事，比赛，事件的查询 id 从本地读取文件后注册到 mock，再调用原本函数开始请求，但原本函数里使用了多进程 Pool，于是导致了很多莫名其妙的 ConnectingError，懒得去探究了，就此作罢，继续使用原函数。要用类似的功能现写也用不了几行代码。</p>
<p>暂时这样了，想要使用的 pip 安装即可。</p>

    </content>
  </entry>
  <entry>
    <title>xPass 模型的特征探索</title>
    <link href="https://tanzhijian.org/posts/xpass_features_exploration"></link>
    <id>1691310174.0</id>
    <updated>2023-08-06T16:22:54Z</updated>
    <published>2023-08-06T16:22:54Z</published>
    <author><name>tanzhijian</name></author>
    <summary>StatsBomb 最近频繁的使用一个新指标 xPass，根据预期进球 xG 的名字可以暂且把它的中文叫做预期传球，那具体的解释呢，可以看他们在文章 [Using xPass To Measure The Impact Of Gamestate On Team Style ](https://statsbomb.com/articles/soccer/using-xpass-to-measure-the-impact-of-gamestate-on-team-style/) 提到的：
</summary>
    <content type="html">
      <h1>xPass 模型的特征探索</h1>
<p>StatsBomb 最近频繁的使用一个新指标 xPass，根据预期进球 xG 的名字可以暂且把它的中文叫做预期传球，那具体的解释呢，可以看他们在文章 <a href="https://statsbomb.com/articles/soccer/using-xpass-to-measure-the-impact-of-gamestate-on-team-style/">Using xPass To Measure The Impact Of Gamestate On Team Style </a> 提到的：</p>
<blockquote>
<p>The definition that you’ll find on our Assist website is: The estimated likelihood of an attempted pass being completed successfully based on the location of the pitch and context the pass is attempted under, and location of the target location of the pass.</p>
<p>In its simplest form it is a measurement of the difficulty of completing a pass. A pass with a high pass success probability (xPass) is likely to be completed a high percentage of the time - you can think of these as safe, low-risk passes. A pass across the back between two CBs, who aren’t being pressured, would have a high xPass value, for example.</p>
<p>By contrast, a pass with a low xPass value is likely to be completed a low percentage of the time - you can think of these as risky, more direct passes. Consider a full back playing a ball from his own half into the channels, whilst being pressured by an opponent, for example.</p>
<p>Loosely speaking, playing more high xPass passes would equate to being more measured in possession and playing more ‘safe’ passes, whereas playing passes with a lower xPass value would indicate a more direct style of play.</p>
</blockquote>
<p>有几个比较重要的句子划一下：</p>
<ul>
<li>根据球场位置、传球的环境以及传球目标的位置，完成传球成功的可能性</li>
<li>
最简单的用法是衡量完成传球的难度：<ul>
<li>较高的 xPass 可能会在很高比例的时间内完成，可以将其视为安全低风险的传球，比如两名中后卫之间的回传球</li>
<li>较低的 xPass 占有的时间比率很低，可以将其视为有风险的更加直接的传球</li>
</ul>
</li>
</ul>
<p>通过上面的描述可以得到训练一个 xPass 模型主要的特征：</p>
<ul>
<li>传球队员坐标</li>
<li>接球队员坐标</li>
</ul>
<p>这两者可能是最重要的特征了，从中可以得出一些计算特征：</p>
<ul>
<li>传球距离</li>
<li>传球队员和接球队员的区域划分?：是否需要把场上位置划分为一些区域来分块，这个特征不是很确定</li>
<li>传球队员和接球队员的位置？需不需要一个 passmap 来确定场上位置？也不确定</li>
</ul>
<p>接下来是传球的环境，可以理解为：</p>
<ul>
<li>传球队员的受干扰程度，根据 xG 的干扰射门特征的计算可以假设成传球事件坐标半径 1 米内有无防守队员</li>
<li>接球队员受干扰程度，同上</li>
<li>是否有球员干扰传球路线，在传球路线上下各延伸出 0.5 米形成一个长方形区域，区域内是否有球员，区分队友和对手</li>
</ul>
<p>作为衍生物，甚至可以顺便计算了 packing :)</p>
<p>而 label, 则通过下一次事件来确定是否为一次成功的传球，比如传球事件的下一次事件换成了对手的事件，或者定位球事件，则不是一次成功的传球</p>
<p>接来下将抽时间使用 StatsBomb 的公开数据来训练一个基于上面假设的 xPass 模型，只是 StatsBomb 公开数据并没有他们已经计算好的 xPass 作为参考，但可以通过他们对于 xPass 的运用来做一些验证，这些之后再探讨</p>

    </content>
  </entry>
  <entry>
    <title>《挪威的森林》读书笔记</title>
    <link href="https://tanzhijian.org/posts/norwegian_wood"></link>
    <id>1686749881.0</id>
    <updated>2023-06-14T21:38:01Z</updated>
    <published>2023-06-14T21:38:01Z</published>
    <author><name>tanzhijian</name></author>
    <summary>即使过了很多年，我仍然抑制不住对这本书的偏爱。
</summary>
    <content type="html">
      <h1>《挪威的森林》读书笔记</h1>
<p>即使过了很多年，我仍然抑制不住对这本书的偏爱。</p>
<h2>1.</h2>
<p>这是一个关于青春的故事。轻松，幽默，直白。十八岁的渡边来到东京上大学，住在集中式宿舍，室友是生活习惯规矩而普通的“敢死队”，准时规律起床做操；没有突出的个性，房间里贴运河的贴画，对文学不甚了了。让我想起以前读书那会儿班上农村的孩子，老实上学规矩生活，却被城里见过世面富有个性的孩子当作“怪咖”的笑料。对于理想什么的也没多大见解，只认准“绘地图，毕业去国土地理院”。</p>
<p>相对来说，随后出现的永泽，则像是以“敢死队”的反面存在的人物。譬如与渡边的对话里表达出的对于理想的见解：“人生中无需那种东西，需要的不是理想，而是行为规范！”，坦诚的痛快。毕业后进入外务省“施展自己的一番拳脚，想看看自己在这臃肿庞大的官僚机构中能爬到什么地步”，对自己有清晰的认识。读过的书“我辈较之他真可谓望尘莫及”。对于事物均有着强烈的个人见解，气质非凡。渡边与之在一起也实则有趣，讨论《了不起的盖茨比》，喝酒，与年轻女性约会，展现年轻人生活应有的部分。在描写中也少见的以相对激进直白的方式。罢课期间的一段描述：</p>
<blockquote>
<p>于是我走到他们跟前，问他们何以前来教室而不继续罢课，他们没有回答，也没法回答。他们害怕因缺课过多而拿不到学分。此等人物居然也高喊什么肢解大学，想来令人喷饭。如此卑劣小人，唯有见风使舵投敌变节之能事。</p>
<p>我说木月，这帮家伙一个不少的拿得大学学分，跨出校门，将不遗余力地构筑一个同样卑劣的社会。</p>
</blockquote>
<p>较之小部分的激进，通常的村上则是习惯布局隐喻。结识绿子以后，交谈中一些轻松幽默的段子：</p>
<blockquote>
<p>“这里烧着了也不跑？”</p>
<p>“嗯，死了就死了呗！”</p>
<p>“好，我明白，奉陪就是，陪你。”</p>
<p>“和我一块死？”</p>
<p>“难说，一旦势头不妙我可得逃走。要死你一个人死好了”</p>
<p>“冷酷。”</p>
<p>“只讨你一顿午饭，怎么能连命都一块搭进去呢？晚饭也招待的话另当别论。”</p>
<p>“你这人！算啦算啦。反正现在这儿看一会吧。我来唱歌给你听。”</p>
<p>“唱歌？”</p>
</blockquote>
<p>于是面对失火的场景，渡边一边喝啤酒，一边欣赏绿子弹唱。直白表达宣泄，对周遭事物不屑一顾，这是属于年轻人的专利，不至于被扣上什么“冷漠”“没有公德心”的帽子。</p>
<p>渡边几乎又是村上笔下那种一个模子刻出来的主角：三十七岁，孤单，话好像不多，并没表现出什么特别才能和特别个性；年轻时候喜好的读书和听音乐，无非是大众都能脱口而出的爱好。我曾经在一篇豆瓣影评里读到这样一段评论日本作家的话：“肆意描写着性，谋杀，毒品以及病态的心。”，《挪威的森林》开篇正是以渡边自我解读内心的情感开始的。渡边的内心世界，敏感而细致，同时又充满巨大的疑惑和否定。</p>
<p>对于“敢死队”，渡边怀着戏虐的心态，作为笑料的谈资；在“敢死队”离开后，却又不时怀念起，甚至充满羡慕和感激。</p>
<p>对于永泽，渡边算是真正了解，同时也被真正了解。对于永泽性格的一部分，诚实，潇洒，一些独特的见解，渡边是抱欣赏态度。但同时永泽对于女性的态度，更确切来说对初美的态度，因为他的傲慢，对人生清醒的认识，使得渡边在与初美的交谈中几乎明确的说出：“与永泽是没有未来的”。最后因为初美的自杀，使得渡边对于永泽彻底爆发：“把告知初美死讯的信撕得粉碎，此后再未给他写过信。”</p>
<p>对于初美，是起初连渡边都不明白的情感，直到书中所说的“十二三年以后”，来到新墨西哥州的圣菲城：</p>
<blockquote>
<p>傍晚，我走近附近一家意大利比萨饼店，一边喝啤酒嚼比萨饼，一边眺望美丽的夕阳。天地间的一切全都红彤彤一片。我的手，盘子，桌子，凡是目力所及的东西，无不被染成了红色，而且红得非常鲜艳，俨然被特殊的果汁从上方直淋下来似的。就在这种气势夺人的暮色当中，我猛然想起了初美，并且这时才领悟她给我带来的心灵震撼究竟是什么东西——它类似一种少年时代的憧憬，一种从来不曾实现而且永远不可能实现的憧憬。</p>
</blockquote>
<p>书中对于初美的描写可谓是完美：高雅，善良，热情，得体，理智。永泽也曾感叹：“配我太可惜了。”而在渡边领悟到此为何物时，“这种直欲燃烧般的天真烂漫的憧憬，我在很早以前就已遗忘在什么地方了，甚至很长时间里我连它曾在我心中存在过都记不起来了。”“当我恍然大悟时，一时悲怆之极，几欲涕零。”书中的这一段文字极为华美，读到这一段时心中不由泛滥出多种别样的心绪：在年少时也心醉于周围看起来如此美好的女性，常不能自拔，我清楚的知道这与爱情什么的无关，但没办法解析的再明白，直到这一刻才恍然大悟了，它什么都不是，只与年轻有关。</p>
<h2>2.</h2>
<p>前面提到了整本书以渡边解读内心的情感开始，贯穿主线的，正是渡边内心不断发展的两条情感主线：一条渴望正常生活，同时也在过着正常生活；另一条陷入一团泥潭，一团因木月之死直子带来的心结的泥潭。</p>
<p>这好像也映射了渡边内心两种矛盾性格的部分：一部分封闭了自我，只在属于木月，直子的圈子里打转；另一部分却好像已经全然无事的接受了新的生活，上课打工结交新朋友。在书开头的部分木月死后渡边住进宿舍时有一句话：“死并非生的对立面，而作为生的一部分永存”。几乎已经说出了本书的主线：木月直子渡边的牵绊，不可磨灭的存在于渡边今后的生活中。</p>
<p>渡边第一次去“阿美寮”，剧情上是探望正在与心理做抗争的直子，但我解读成渡边在对自己内心的治疗：与绿子的接触，与永泽在新宿街头游荡，使得渡边的内心一些摇摆的躁动。他应该呆在自己封闭的内心，可现实的诱惑让他无法拒绝。书中则通过了石田玲子——既是治愈直子，同时也治愈着渡边——来说出渡边寻求的答案：“因为那是你的人生，应该由你决定。我要说的，只是希望你不要用不自然的方式磨损自己。懂吗？那是最不得偿失的。”</p>
<p>之后永泽对渡边的一番解剖挺有意思：</p>
<blockquote>
<p>他和我一样，在本质上都是只对自己感兴趣的人，只不过在傲慢和不傲慢上有所差别，自己想什么，自己感受什么，自己如何行动——除此之外对别的没有兴趣，所以才能把自己同别人分开来考虑。我喜欢渡边也无非喜欢他这一点。只是他这小子还没有清楚的认识这点，以致感到迷惘和痛苦。</p>
</blockquote>
<p>准确无误，实际上渡边的所有行动都已经倾向了正常的生活，只是他自己还未认识到。</p>
<p>当渡边读到了玲子的信，得知直子病情已经恶化时，内心已经明晰了：“木月！我和你不同，我决心活下去。”“我已不是十几岁的少年，我已感到自己肩上的责任。”虽然还在等待直子的康复，但不可回避的，两条内心已经合并，走向了结局。</p>
<h2>3.</h2>
<p>小林绿子和石田玲子。这两位无疑是《挪威的森林》里的“特殊人物”，唯二享有“全名”的待遇。</p>
<p>绿子是渡边正常生活的重要组成部分，活力，善解人意，别具一格。与渡边的心理很多的时候都很是合拍，譬如孤独。绿子讨厌自己父亲给选择的高中女校，却从不曾迟到和缺课；被父亲生病折磨的不胜其烦，却还是尽心的照顾。不掩饰自己的好恶，在大骂了一通税务员后抛出了一句耐人寻味的：“我才不信什么革命哩！我只信爱情。”总有那么些稀奇古怪目瞪口呆的脑补，给人感觉却是真实。</p>
<p>这样的性格仿佛才是渡边在找寻的。</p>
<p>石田玲子在整本书中担任了“治愈”的角色。渡边去到“阿美寮”；随后与渡边的几番通信；在直子死后来到渡边的出租屋弹唱《挪威的森林》；化解了渡边迟迟无法解开的“好凄凉的葬礼”；最后还以以直子的方式收了在之前埋下身穿直子衣服的伏笔。</p>
<p>我向来有一种看法，村上塑造的角色，有些不能以”角色“这样的角度来定义。他们更多时候像是扮演一面镜子，为了主角审视混乱不堪的自己而存在。譬如《海边的卡夫卡》里的大岛，冷静的不像话，随时在通过聊天的方式，让田村卡夫卡审视真实的自己。玲子的存在大概也是如此，在用所有的办法让渡边了解了真实的自己。</p>
<h2>4.</h2>
<p>关于活下去。</p>
<p>故事的最后，渡边送别了玲子，打电话给绿子，一切从头开始。</p>
<p>绿子问渡边“你现在在哪里？”，小说到这里结束，渡边早已不再困惑，引用之前永泽的话说：“只是他这小子还没有清楚的认识这点。”</p>
<p>而答案其实在书的中间一段，渡边第一次去“阿美寮”时与直子的一次对话中就已清楚给出：“你太悲观了，在黑夜，噩梦，私人的力量面前太胆小了。你必须做的是忘记这些。”这便是渡边早已明白，却一直无法认清的。</p>

    </content>
  </entry>
  <entry>
    <title>score-simulator 的一些想法</title>
    <link href="https://tanzhijian.org/posts/score_simulator"></link>
    <id>1686477588.0</id>
    <updated>2023-06-11T17:59:48Z</updated>
    <published>2023-06-11T17:59:48Z</published>
    <author><name>tanzhijian</name></author>
    <summary>最近在利用业余时间入门 2023 年前端的新姿势，前两天无聊趁着欧冠决赛前夜，用目前所学到的写了一个前端的比分模拟器 [score-simulator](https://score-simulator.tanzhijian.org/)，小规模发给了一些朋友 roll，反响居然不错，都 roll 得蛮开心的。所以想说一下模拟比赛的原理，以及之后会完善的一些思路。
</summary>
    <content type="html">
      <h1>score-simulator 的一些想法</h1>
<p>最近在利用业余时间入门 2023 年前端的新姿势，前两天无聊趁着欧冠决赛前夜，用目前所学到的写了一个前端的比分模拟器 <a href="https://score-simulator.tanzhijian.org/">score-simulator</a>，小规模发给了一些朋友 roll，反响居然不错，都 roll 得蛮开心的。所以想说一下模拟比赛的原理，以及之后会完善的一些思路。</p>
<p>score-simulator 的模型设想是通过简化的方式来模拟一场比赛，在比赛中随机出现进球，但不能是完全随机，需要参考现实中的表现参数。所以首先是每分钟的射门事件，主队 + 客队本赛季的平均每 90 分钟射门次数，得到比赛每分钟射门的概率。</p>
<p>接下来如果产生了射门，那么是谁的。这里使用了一方射门数 / 射门总数得出主客队射门占比。</p>
<p>但由于两队实力的不均衡，使用了队伍的排名 <a href="http://www.clubelo.com/">clubelo</a> 作为权重，强的队伍 = 1, 弱的队伍 /= 强的队伍。</p>
<p>再使用双方赛季总预期进球 / 赛季总射门次数，得到双方的每次射门的平均预期进球 xG/Sh，来确定本次射门是否进球。</p>
<p>到这里模拟了每分钟的事件，运行 90 次得到一场比赛的结果。</p>
<pre><code class="language-python">def whoscored(home_goal: int = 0, away_goal: int = 0) -&gt; tuple[int, int]:
    attempt = rnd.rand(1, 1)
    if attempt &lt; shot_prob_per_minute:
        who = rnd.rand(1, 1)
        if who &lt; shot_percentage:
            shot = rnd.rand(1, 1)
            if shot &lt; home_xg_per_shot:
                home_goal += 1
        else:
            shot = rnd.rand(1, 1)
            if shot &lt; away_xg_per_shot:
                away_goal += 1
    return home_goal, away_goal


def play_game():
    for _ in range(90):
        pass
</code></pre>
<p>之后会完善一下模拟比赛的模型，比如加上一些正态分布，使得比分结果更为合理，比如一些考虑到防守质量的参数。</p>
<p>还会获取现实的赛程表和数据，也能自己编辑队伍，使得在更多的比赛开场前都能玩一玩。</p>

    </content>
  </entry>
  
</feed>