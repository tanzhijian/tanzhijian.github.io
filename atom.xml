<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tanzhijian.org</title>
  <id>https://tanzhijian.org/atom.xml</id>
  <updated>2023-04-12T01:17:42Z</updated>
  <link href="tanzhijian.org"/>
  <link href="https://tanzhijian.org/atom.xml" rel="self"/>
  <generator>?</generator>
  <entry>
    <title>阿森纳不败赛季传球路线图探索 01</title>
    <link href="https://tanzhijian.org/posts/invincible01"></link>
    <id>1681233462.3863146</id>
    <updated>2023-04-12T01:17:42Z</updated>
    <published>2023-04-12T01:17:42Z</published>
    <author><name>tanzhijian</name></author>
    <summary>statsbomb 有一些有趣的公开数据，比如梅西的职业生涯，阿森纳的不败赛季，最近在上足球数据可视化的课程，刚好拿来玩一玩。
</summary>
    <content type="html">
      <h1>阿森纳不败赛季传球路线图探索 01</h1>
<p>statsbomb 有一些有趣的公开数据，比如梅西的职业生涯，阿森纳的不败赛季，最近在上足球数据可视化的课程，刚好拿来玩一玩。</p>
<p>通过 competitions 找到英超联赛 0304赛季的 id，其中只有阿森纳的比赛，这次随便获取一场比赛来试手，2004 年 4 月 25 日北伦敦德比，阿森纳在白鹿巷球场 2:2 战平热刺，高举起英格兰超级联赛冠军奖杯，就它了。</p>
<h2>import</h2>
<p>```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mplsoccer import Pitch, Sbopen</p>
<p>match_id = 3749068
```</p>
<p><code>python
parser = Sbopen()
events, related, freeze, tactics = parser.event(match_id)</code></p>
<p>```python</p>
<h1>检查一下数据集</h1>
<p>events.info()
```</p>
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 3156 entries, 0 to 3155
Data columns (total 77 columns):
 #   Column                          Non-Null Count  Dtype  
---  ------                          --------------  -----  
 0   id                              3156 non-null   object 
 1   index                           3156 non-null   int64  
 2   period                          3156 non-null   int64  
 3   timestamp                       3156 non-null   object 
 4   minute                          3156 non-null   int64  
 5   second                          3156 non-null   int64  
 6   possession                      3156 non-null   int64  
 7   duration                        2355 non-null   float64
 8   match_id                        3156 non-null   int64  
 9   type_id                         3156 non-null   int64  
 10  type_name                       3156 non-null   object 
 11  possession_team_id              3156 non-null   int64  
 12  possession_team_name            3156 non-null   object 
 13  play_pattern_id                 3156 non-null   int64  
 14  play_pattern_name               3156 non-null   object 
 15  team_id                         3156 non-null   int64  
 16  team_name                       3156 non-null   object 
 17  tactics_formation               3 non-null      float64
 18  player_id                       3145 non-null   float64
 19  player_name                     3145 non-null   object 
 20  position_id                     3145 non-null   float64
 21  position_name                   3145 non-null   object 
 22  pass_recipient_id               801 non-null    float64
 23  pass_recipient_name             801 non-null    object 
 24  pass_length                     879 non-null    float64
 25  pass_angle                      879 non-null    float64
 26  pass_height_id                  879 non-null    float64
 27  pass_height_name                879 non-null    object 
 28  end_x                           1571 non-null   float64
 29  end_y                           1571 non-null   float64
 30  body_part_id                    899 non-null    float64
 31  body_part_name                  899 non-null    object 
 32  sub_type_id                     322 non-null    float64
 33  sub_type_name                   322 non-null    object 
 34  x                               3139 non-null   float64
 35  y                               3139 non-null   float64
 36  outcome_id                      434 non-null    float64
 37  outcome_name                    434 non-null    object 
 38  under_pressure                  670 non-null    float64
 39  counterpress                    82 non-null     float64
 40  off_camera                      65 non-null     float64
 41  aerial_won                      38 non-null     object 
 42  out                             34 non-null     float64
 43  ball_recovery_recovery_failure  11 non-null     object 
 44  pass_switch                     38 non-null     object 
 45  foul_committed_advantage        5 non-null      object 
 46  foul_won_advantage              5 non-null      object 
 47  technique_id                    50 non-null     float64
 48  technique_name                  50 non-null     object 
 49  pass_assisted_shot_id           16 non-null     object 
 50  pass_goal_assist                3 non-null      object 
 51  shot_open_goal                  1 non-null      object 
 52  shot_statsbomb_xg               23 non-null     float64
 53  end_z                           19 non-null     float64
 54  shot_key_pass_id                16 non-null     object 
 55  shot_first_time                 8 non-null      object 
 56  goalkeeper_position_id          23 non-null     float64
 57  goalkeeper_position_name        23 non-null     object 
 58  pass_cross                      15 non-null     object 
 59  dribble_overrun                 3 non-null      object 
 60  ball_recovery_offensive         2 non-null      object 
 61  pass_shot_assist                13 non-null     object 
 62  foul_won_defensive              9 non-null      object 
 63  pass_deflected                  2 non-null      object 
 64  half_start_late_video_start     2 non-null      object 
 65  substitution_replacement_id     5 non-null      float64
 66  substitution_replacement_name   5 non-null      object 
 67  foul_committed_card_id          2 non-null      float64
 68  foul_committed_card_name        2 non-null      object 
 69  dribble_nutmeg                  1 non-null      object 
 70  shot_one_on_one                 1 non-null      object 
 71  pass_cut_back                   1 non-null      object 
 72  block_offensive                 1 non-null      object 
 73  foul_committed_penalty          1 non-null      object 
 74  foul_won_penalty                1 non-null      object 
 75  bad_behaviour_card_id           1 non-null      float64
 76  bad_behaviour_card_name         1 non-null      object 
dtypes: float64(26), int64(10), object(41)
memory usage: 1.9+ MB
</code></pre>
<p>```python</p>
<h1>查看有哪些事件</h1>
<p>events['type_name'].unique()
```</p>
<pre><code>array(['Starting XI', 'Half Start', 'Pass', 'Ball Receipt', 'Carry',
       'Block', 'Ball Recovery', 'Pressure', 'Duel', 'Clearance',
       'Foul Committed', 'Foul Won', 'Dribbled Past', 'Dribble', 'Shot',
       'Goal Keeper', 'Dispossessed', 'Interception', 'Miscontrol',
       '50/50', 'Offside', 'Half End', 'Substitution', 'Error',
       'Tactical Shift', 'Bad Behaviour'], dtype=object)
</code></pre>
<p>由于换人了以后阵容战术就会变动，所以绘制首发传球图需要在第一次换人之前，找到第一次换人的事件</p>
<p>然后过滤掉：</p>
<ol>
<li>对手的事件</li>
<li>换人之后的事件，也就是index 小于 sub 的事件</li>
<li>失败的传球</li>
</ol>
<p><code>python
first_sub = events.loc[
    events['type_name'] == 'Substitution'].loc[
    events['team_name'] == "Arsenal"].iloc[0]
first_sub</code></p>
<pre><code>id                         7900f48c-1308-4aa5-9ec8-37af5c06a6d7
index                                                      2335
period                                                        2
timestamp                                       00:21:42.293000
minute                                                       66
                                           ...                 
block_offensive                                             NaN
foul_committed_penalty                                      NaN
foul_won_penalty                                            NaN
bad_behaviour_card_id                                       NaN
bad_behaviour_card_name                                     NaN
Name: 2334, Length: 77, dtype: object
</code></pre>
<p><code>python
_filter = (
    events.type_name == 'Pass') &amp; (
    events.team_name == "Arsenal") &amp; (
    events.index &lt; first_sub['index']) &amp; (
    events.outcome_name.isnull())</code></p>
<p><code>python
_filter.head()</code></p>
<pre><code>0    False
1    False
2    False
3    False
4     True
dtype: bool
</code></pre>
<p>```python</p>
<h1>获取必要的数据</h1>
<p>passes = events.loc[_filter, [
    'x', 'y', 'end_x', 'end_y',
    'player_id', 'player_name', 'pass_recipient_name', 'pass_recipient_id'
]]
```</p>
<p><code>python
passes.head()</code></p>
<div>
<table border="1">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>x</th>
      <th>y</th>
      <th>end_x</th>
      <th>end_y</th>
      <th>player_id</th>
      <th>player_name</th>
      <th>pass_recipient_name</th>
      <th>pass_recipient_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>60.0</td>
      <td>40.0</td>
      <td>62.3</td>
      <td>43.5</td>
      <td>15516.0</td>
      <td>Thierry Henry</td>
      <td>Dennis Bergkamp</td>
      <td>15042.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>62.0</td>
      <td>43.5</td>
      <td>47.2</td>
      <td>30.7</td>
      <td>15042.0</td>
      <td>Dennis Bergkamp</td>
      <td>Patrick Vieira</td>
      <td>15515.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>47.2</td>
      <td>29.5</td>
      <td>38.2</td>
      <td>12.1</td>
      <td>15515.0</td>
      <td>Patrick Vieira</td>
      <td>Ashley Cole</td>
      <td>12529.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>38.2</td>
      <td>12.1</td>
      <td>31.7</td>
      <td>26.3</td>
      <td>12529.0</td>
      <td>Ashley Cole</td>
      <td>Sulzeer Jeremiah ''Sol' Campbell</td>
      <td>15637.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>28.8</td>
      <td>29.5</td>
      <td>48.4</td>
      <td>38.8</td>
      <td>15637.0</td>
      <td>Sulzeer Jeremiah ''Sol' Campbell</td>
      <td>Gilberto Aparecido da Silva</td>
      <td>40221.0</td>
    </tr>
  </tbody>
</table>
</div>

<h2>计算位置和大小</h2>
<p>对于每个球员，计算传球和接球的平均位置，然后计算每个球员到接球球员的传球次数，传球线路的粗细与之成正比</p>
<p>```python
scatter = pd.DataFrame()
for i, _id in enumerate(passes['player_id'].unique()):
    pass_x = passes.loc[passes['player_id'] == _id]['x'].to_numpy()
    pass_y = passes.loc[passes['player_id'] == _id]['y'].to_numpy()
    rec_x = passes.loc[passes['pass_recipient_id'] == _id]['end_x'].to_numpy()
    rec_y = passes.loc[passes['pass_recipient_id'] == _id]['end_y'].to_numpy()
    scatter.at[i, 'player_id'] = _id</p>
<pre><code># 计算每个点的 x 和 y，位置为传球和接球的平均值
scatter.at[i, 'x'] = np.mean(np.concatenate([pass_x, rec_x]))
scatter.at[i, 'y'] = np.mean(np.concatenate([pass_y, rec_y]))

# 计算传球数
scatter.at[i, 'count'] = passes.loc[
    passes['player_id'] == _id].count().iloc[0]
</code></pre>
<h1>位置大小</h1>
<p>scatter['marker_size'] = scatter['count'] / scatter['count'].max() * 1500
```</p>
<p><code>python
scatter</code></p>
<div>
<table border="1">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>player_id</th>
      <th>x</th>
      <th>y</th>
      <th>count</th>
      <th>marker_size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>15516.0</td>
      <td>73.757692</td>
      <td>33.834615</td>
      <td>10.0</td>
      <td>306.122449</td>
    </tr>
    <tr>
      <th>1</th>
      <td>15042.0</td>
      <td>66.135897</td>
      <td>37.082051</td>
      <td>15.0</td>
      <td>459.183673</td>
    </tr>
    <tr>
      <th>2</th>
      <td>15515.0</td>
      <td>54.474194</td>
      <td>33.134409</td>
      <td>49.0</td>
      <td>1500.000000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>12529.0</td>
      <td>52.920313</td>
      <td>7.568750</td>
      <td>35.0</td>
      <td>1071.428571</td>
    </tr>
    <tr>
      <th>4</th>
      <td>15637.0</td>
      <td>36.142857</td>
      <td>19.846429</td>
      <td>13.0</td>
      <td>397.959184</td>
    </tr>
    <tr>
      <th>5</th>
      <td>40221.0</td>
      <td>52.817460</td>
      <td>43.530159</td>
      <td>32.0</td>
      <td>979.591837</td>
    </tr>
    <tr>
      <th>6</th>
      <td>38412.0</td>
      <td>35.815909</td>
      <td>48.084091</td>
      <td>23.0</td>
      <td>704.081633</td>
    </tr>
    <tr>
      <th>7</th>
      <td>40222.0</td>
      <td>49.040351</td>
      <td>70.389474</td>
      <td>31.0</td>
      <td>948.979592</td>
    </tr>
    <tr>
      <th>8</th>
      <td>19312.0</td>
      <td>61.132308</td>
      <td>18.466154</td>
      <td>32.0</td>
      <td>979.591837</td>
    </tr>
    <tr>
      <th>9</th>
      <td>20015.0</td>
      <td>8.210000</td>
      <td>41.750000</td>
      <td>8.0</td>
      <td>244.897959</td>
    </tr>
    <tr>
      <th>10</th>
      <td>24972.0</td>
      <td>68.381081</td>
      <td>67.370270</td>
      <td>15.0</td>
      <td>459.183673</td>
    </tr>
  </tbody>
</table>
</div>

<h2>球员名及号码</h2>
<p>由于事件数据集只有简单的球员名字和 id，绘制图片时使用名字全称过长，比如 Laureano Bisan-Etame Mayer 这位大哥估计不少人反应不过来是谁，Lauren 就明白了。</p>
<p>需要从另一个数据集中获取</p>
<p><code>python
lineup = parser.lineup(match_id)</code></p>
<p><code>python
arsenal = lineup.loc[lineup['team_name'] == 'Arsenal']
scatter = pd.merge(
    scatter, 
    arsenal[['player_id', 'player_nickname', 'jersey_number']], 
    on='player_id'
)</code></p>
<h2>计算传球线路宽度</h2>
<p>计算线路宽度，需要根据传球和接球的组合对传球数据框进行分组，并计算他们之间的传球次数。最后一步设置了忽略传球次数少于 2 次的球员的阈值。可以尝试不同的值，根据可视化背后的信息调整它</p>
<p>```python</p>
<h1>计算球员之间的传球次数</h1>
<p>passes['pair_key'] = passes.apply(
    lambda x: '-'.join(sorted([str(x['player_id']), 
                               str(x['pass_recipient_id'])])),
    axis=1,
)
lines = passes.groupby(['pair_key']).x.count().reset_index()
lines.rename({'x': 'pass_count'}, axis='columns', inplace=True)
```</p>
<p>```python</p>
<h1>设定一个阈值，可以尝试研究它在更改时如何变化</h1>
<p>lines = lines[lines['pass_count'] &gt; 2]
```</p>
<p><code>python
lines.head()</code></p>
<div>
<table border="1">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>pair_key</th>
      <th>pass_count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>12529.0-15515.0</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>12529.0-15516.0</td>
      <td>4</td>
    </tr>
    <tr>
      <th>3</th>
      <td>12529.0-15637.0</td>
      <td>8</td>
    </tr>
    <tr>
      <th>4</th>
      <td>12529.0-19312.0</td>
      <td>21</td>
    </tr>
    <tr>
      <th>7</th>
      <td>12529.0-40221.0</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>

<h2>绘制路线</h2>
<p>```python</p>
<h1>绘制球场</h1>
<p>pitch = Pitch(line_color='grey')
fig, ax = pitch.grid(
    grid_height=0.9, title_height=0.06, axis=False,
    endnote_height=0.04, title_space=0, endnote_space=0,
)</p>
<h1>球场上的位置</h1>
<p>pitch.scatter(
    scatter.x, scatter.y, s=scatter.marker_size, 
    color='red', edgecolors='grey', linewidth=1, alpha=1,
    ax=ax['pitch'], zorder=3,
)</p>
<h1>填充球员名字</h1>
<p>for i, row in scatter.iterrows():
    pitch.annotate(
        row.player_nickname, xy=(row.x, row.y), c='black', 
        va='center', ha='center', weight="bold", 
        size=14, ax=ax["pitch"], zorder=4,
    )</p>
<p>for i, row in lines.iterrows():
    player1 = float(row['pair_key'].split('-')[0])
    player2 = float(row['pair_key'].split('-')[1])</p>
<pre><code># 取球员的平均位置在他们之间画一条线
player1_x = scatter.loc[scatter['player_id'] == player1]['x'].iloc[0]
player1_y = scatter.loc[scatter['player_id'] == player1]['y'].iloc[0]
player2_x = scatter.loc[scatter['player_id'] == player2]['x'].iloc[0]
player2_y = scatter.loc[scatter['player_id'] == player2]['y'].iloc[0]
passes_count = row['pass_count']
# 调整线宽，传球的次数越多，线越宽
line_width = passes_count / lines['pass_count'].max() * 10

pitch.lines(
    player1_x, player1_y, player2_x, player2_y,
    alpha=1, lw=line_width, zorder=2, color='red', ax=ax['pitch']
)
</code></pre>
<p>fig.suptitle('2004-04-25, Tottenham Hotspur vs Arsenal', fontsize=30)
plt.show()
```</p>
<p><img alt="ARS_VS_HOT_0304_passing_networks.png" src="https://s2.loli.net/2023/04/11/1GzYOeHoiubdvLF.png" /></p>
    </content>
  </entry>
  <entry>
    <title>关于这个博客</title>
    <link href="https://tanzhijian.org/posts/about_blog"></link>
    <id>1680936741.073004</id>
    <updated>2023-04-08T14:52:21Z</updated>
    <published>2023-04-08T14:52:21Z</published>
    <author><name>tanzhijian</name></author>
    <summary>内容没什么好说的，无非就是 GitHub Pages，加上比较懒，样式主题都没改，不过无所谓，以前把博客弄得好看回头文章几年没写一次也不是没有过。
</summary>
    <content type="html">
      <h1>关于这个博客</h1>
<p>内容没什么好说的，无非就是 GitHub Pages，加上比较懒，样式主题都没改，不过无所谓，以前把博客弄得好看回头文章几年没写一次也不是没有过。</p>
<p>但好歹要有一些必须的页面，所以写了一个<a href="https://github.com/tanzhijian/tanzhijian.github.io/blob/master/build.py">脚本</a>生成了 index，archive，以及最重要的 rss，以下是用 ChatGPT 生成的介绍：</p>
<blockquote>
<p>这段代码是一个用 Python 语言写的脚本，可以帮助我们生成一个博客网站。这个博客网站可以展示使用 Markdown 格式编写的博客文章。脚本会读取 "posts" 文件夹中的 Markdown 文件，将它们转换为 HTML 格式，并且使用 Jinja2 模板语言生成 Atom 订阅源、主页和归档页。</p>
<p>代码中定义了一些函数，它们会将 Markdown 文件转换为字典，然后使用 Jinja2 模板渲染字典数据，最终生成网站文件。其中 main 函数是整个程序的主要逻辑，它会读取 Markdown 文件夹中的所有文件，将它们转换为字典并排序，然后将字典数据填充到 Jinja2 模板中，最终生成网站文件。</p>
<p>这个脚本是一个简单的示例，可以作为生成静态网站的基础。</p>
</blockquote>
<p>不足的地方还很多，比如日期是读取文件修改日期，简介只是粗暴的截取第一段填充字数，这些随着使用过程再改了。</p>
<p>关于之后能写的目标，尽量做到避免文章标题复制给 ai 能写出相似更好的内容，这样太糟糕了。</p>
    </content>
  </entry>
  <entry>
    <title>《萤》读书笔记</title>
    <link href="https://tanzhijian.org/posts/firefly"></link>
    <id>1679403673.5903647</id>
    <updated>2023-03-21T21:01:13Z</updated>
    <published>2023-03-21T21:01:13Z</published>
    <author><name>tanzhijian</name></author>
    <summary>翻开这本书时想起了一个小插曲。几年前由于工作原因，需要经常和一个朋友交接，一来二去熟络起来后，偶尔会聊上一些生活。有一次朋友说起正在看一部叫《燃烧》的电影，我没有听说过。
</summary>
    <content type="html">
      <h1>《萤》读书笔记</h1>
<p>翻开这本书时想起了一个小插曲。几年前由于工作原因，需要经常和一个朋友交接，一来二去熟络起来后，偶尔会聊上一些生活。有一次朋友说起正在看一部叫《燃烧》的电影，我没有听说过。</p>
<p>“就是村上春树的小说《烧仓房》改编的。”</p>
<p>“我也没读过《烧仓房》。”</p>
<p>“这。。。你不是很喜欢他吗？”</p>
<p>“不过是个随波逐流的读者罢了。短篇小说陆陆续续读一些，但不记得有这一篇了。”</p>
<p>几天后我收到一个快递，是《萤》这本书。封页写上了一行寄语：“镜子里显现出的，只是表面的真相。”字体秀气。</p>
<p>博尔赫斯的诗。但我并未去想它的含义，也并未去读这本书，很快被我放进书柜了。当时周围不断发生着各种各样的事，应付这些已经精疲力竭，根本没有余力停下步子，等到我再次想起这个朋友时，已经随着工作的变迁渐行渐远了。我仍然能记起朋友说话时永远一副小心翼翼的模样，只是，朋友叫什么名字来着？</p>
<p>言归正传，说回这本书。</p>
<p>《烧仓房》依然是村上春树万年不变的主题，高度发达的资本主义社会与社会边缘人物，这次直白探讨了它们之间的关系。一共有三个人物，我，年轻女孩，她的富哥男朋友，其中我和年轻女孩——一个是无所事事的落魄作家，一个是打零工赚取必要生活开支——社会边缘人物，而富哥男朋友：“做什么不知道，反正就是有钱，谜一样的小伙子。”“简直成了菲茨杰拉德的《了不起的盖茨比》。”</p>
<p>谈到这篇小说的隐喻无非就两个，年轻女孩，以及仓房。富哥男朋友告诉我，他有一种叫做烧仓房的嗜好，就是偷偷地用汽油点燃别人家废弃的仓房，并用望远镜观看火焰。他说这样做是为了维持一种道德上的平衡感。小说中对于仓房的描述：</p>
<blockquote>
<p>海边孤零零的仓房，田地中间的仓房……反正各种各样的仓房。只消十五分钟就烧的一干二净，简直像压根儿不存在那玩意儿。谁都不伤心。只是——消失而已，忽地。</p>
<p>第三处仓房和第四处仓房酷似又老又丑的双胞胎，相距也不过两百米，哪个都那么陈旧那么污秽，甚至叫人觉得要烧索性一起烧掉罢了。</p>
<p>建筑物——我不知道能否称其为建筑物——几乎已经开始解体。的确如他所说，看上去果真像在静等谁来点上一把火。</p>
</blockquote>
<p>社会边缘人物。</p>
<p>故事的最后我碰到了富哥男朋友，他说他已经烧掉了附近最好最值得烧的，但却不是我所找的的任何一个仓房。我还想追问，被他打住了，随后问起年轻女孩的下落，消失了。</p>
<p>我看了很多解读，包括电影《燃烧》，到这里都在讨论，烧仓房只是象征，被真正“烧”掉的是年轻女孩，以及随之而来的阶层固化，上层阶级对于道德甚至法律的话语权，等等。</p>
<p>在我看来本书的结尾处理才是这篇小说仅仅想要表达的主题，一个更绝望的主题：只需要安排一个结局罢了。</p>
<p>至于哪座仓房被真正烧掉了，年轻女孩又是否真的消失了，谁在意呢？</p>
    </content>
  </entry>
  <entry>
    <title>《Football Hackers》读书笔记 04, 瓜迪奥拉</title>
    <link href="https://tanzhijian.org/posts/football_hackers_04"></link>
    <id>1678894701.1364126</id>
    <updated>2023-03-15T23:38:21Z</updated>
    <published>2023-03-15T23:38:21Z</published>
    <author><name>tanzhijian</name></author>
    <summary>这一章主题是革命，足球世界大致符合金钱统治的规律，但有一些手段可以挑战规律，比如挑战现有规则，比如定位球的改进利用，这些大致属于结果倒推过程，就略过了。
</summary>
    <content type="html">
      <h1>《Football Hackers》读书笔记 04, 瓜迪奥拉</h1>
<p>这一章主题是革命，足球世界大致符合金钱统治的规律，但有一些手段可以挑战规律，比如挑战现有规则，比如定位球的改进利用，这些大致属于结果倒推过程，就略过了。</p>
<p>有意思的是一些关于瓜迪奥拉的结论，包括这一章和下一章的:</p>
<blockquote>
<p>瓜迪奥拉以一种独特的方式思考比赛，巴塞罗那是开发新式足球的实验室。他的球队是 4-4-2 还是 4-3-3？基本阵型结构失去了许多相关性；事实上，它们似乎完全融化成一个流动的结构，依靠一系列球场事件和球员任务相互融合。</p>
<p>我们开始了解到，阵型的宽度和固定不再存在。也许它们不再那么重要了，更多的是关于在某些情况下出现的行动原则。他补充，一场比赛的准备让他突然想到了 3-2-4-1。我甚至不知道可以那样比赛。如果不断地尝试寻找更快地转换侧翼或改变传球距离的方法，最终会到达可以排成不同基本阵型的地步。</p>
<p>瓜迪奥拉或图赫尔等教练认为足球是一场不懈的斗争，目的是在接近球、进攻和防守时创造人数上的优势。球场上的空间必须不断地重新占据，以创造传球的选择。图赫尔告诉他的球员们要“尊重空间”。乍一看这听起来很奇怪，但它是为了强调空间是一个动态概念。</p>
<p>空间通常只会动态存在片刻，必须确保你的队友会在你期望的位置。球必须尽可能快、尽可能准确地到达那里。</p>
<p>阵型系统只是使个性发挥作用的框架。它不是死板的，而是一种指导，表明对手哪里有问题，他们为我们留出了空间，他们的球员在战术上没有做正确的事情。它告诉他们在哪里攻击以及如何攻击。我们提供这些模式并在视频中展示它们。我们练习的不多，真的，我们几乎完全专注于训练中的防守动作。我们的进攻来自于不同的模式，在不同的时间，针对不同的对手。重要的是进入这些空间，让我们的球员有机会作为个人脱颖而出。这就是为什么球员必须准确地出现在他们可以做得最好的地方的原因。</p>
<p>他致力于通过比赛位置找到进入禁区并创造优势的方法。他会连续数小时思考问题，有时甚至通宵达旦，并与分析团队讨论。他也会亲自观看比赛，思考策略。有些工作会一直重复，但这是必要的。</p>
<p>功成名就的主教练传记通常详细描述了，经历过狂热的比赛视频研究时期。在这方面，克洛普与瓜迪奥拉和图赫尔没有什么不同，</p>
<p>拜仁的分析师迈克尔尼迈耶告诉我，瓜迪奥拉对数据不感兴趣；他从比赛视频中获取了他需要的所有信息。从字面意义上讲，加泰罗尼亚人不是数据爱好者，而是一个有远见的人：他狂热地寻找通往对手球门的途径，空间和数据优势更容易在影像的帮助下得到改进。</p>
<p>瓜迪奥拉和他那一代人通过观看无数小时的比赛视频来磨练他们的专业知识。</p>
</blockquote>
    </content>
  </entry>
  <entry>
    <title>《刺杀骑士团长》读书笔记</title>
    <link href="https://tanzhijian.org/posts/commendatore"></link>
    <id>1678112227.7996528</id>
    <updated>2023-03-06T22:17:07Z</updated>
    <published>2023-03-06T22:17:07Z</published>
    <author><name>tanzhijian</name></author>
    <summary>大多数人习惯在解读这本小说时带到很高的高度，而在我看来这本小说并没有那么复杂，他有着我读过的村上春树小说中最为平衡的框架，极其顺畅的流程，同时故事也没有到难以理解，只围绕一个主题展开，也就是他的书名，《刺杀骑士团长》的这幅画。
</summary>
    <content type="html">
      <h1>《刺杀骑士团长》读书笔记</h1>
<p>大多数人习惯在解读这本小说时带到很高的高度，而在我看来这本小说并没有那么复杂，他有着我读过的村上春树小说中最为平衡的框架，极其顺畅的流程，同时故事也没有到难以理解，只围绕一个主题展开，也就是他的书名，《刺杀骑士团长》的这幅画。</p>
<p>任何一部小说都需要有一只无形的手来把主角卷入设定好的情节，于是免色涩在故事的前部分挖开了那个象征命运封印的洞，后半部分则换成了秋川真理惠——需要有一面镜子，来反视，或者推敲那些暂且感知不到，视线以外的信息。</p>
<p>而展开一切情节就在于《刺杀骑士团长》的画：</p>
<blockquote>
<p>血从他的胸口喷涌而出。剑的尖端大概刺中了大动脉，血染红他的白色装束。嘴痛得扭歪着，眼睛睁得大大的，万念俱灰的瞪视虚空。他知道自己失败了，但真正的疼痛尚未到来。</p>
<p>另一方的年轻男子眼神极为冷酷，目不转睛的直视对手。眼睛没有悔意，没有困惑与怯懦，没有兴奋表示。瞳仁是那般冷静，眼睛里只有迫在眉睫的一个人的死，以及自己确切无疑的胜利。四溅的血不过是其证明罢了，并未给他带来任何情感。</p>
</blockquote>
<p>这幅充满杀戮信息的画随着不断深入的情节展开了创作背后的故事。作者雨田具彦一九三八年在维也纳参与了一场可能会改变世界线的暗杀，然而失败，他的恋人，地下抵抗组织的成员，被杀害了，而他在可能遭受了非人折磨后遣送回国——从盖世太保手中“抢救出来”。同年他的弟弟在参与了侵华战争，那场大屠杀之后回国，割腕自杀。</p>
<blockquote>
<p>一个除了弹一手好钢琴别无他想的二十岁青年被投入死尸累累的南京战场。</p>
<p>但当时是彻底的军国主义社会，根本没有那样的术语和概念，而仅仅以性格懦弱，没有意志力，缺乏爱国精神处理了事。</p>
</blockquote>
<p>正是这部小说表达的核心，反战，恶，集体之恶。</p>
<p>故事的高潮，主角见到了已经走到生命尽头的雨田具彦，正是他在临终前，通过不断的影响世界把主角卷入其中，他需要他帮他完成刺杀骑士团长这一事件，弥补自己只能寄托于那张画中，毕生都没有做到的那件事，同时因为弟弟在侵华战争中的暴力行为而终身内疚。他将他死前得到救赎的机会拜托给了主角，拿起他已经准备好磨好的刀，刺向那个骑士团长的具象。</p>
<blockquote>
<p>骑士团长失去意识瘫倒之后不久，这位老人也似乎再次耗尽了使得精神集中的力气，就像要说“该看的看清楚了”似的大大吐出一口气，随即闭上眼睛。</p>
<p>看上去他得以重返昏睡那个平稳的世界，那个一无意识二无痛楚的世界。我为他感到欣慰。</p>
</blockquote>
<p>当然了，作为一部四十余万字的小说，丰富程度不仅于此，比如一直不变的“高度发达的资本主义社会与身处边缘却自成一统的价值观和付诸行动的良知勇气”，比如永远“继承”的人物群像模板，这些在读过很多本村上春树小说后变得不那么重要，更何况随着年纪的增大，自己也活成了他笔下那些孤独的配角。值得高兴的是，作为一个已经七十多岁的作者，能感受到他一直精进的笔法和节奏，似乎永远不用担心他成为年纪轻轻的传说——“那甚至是一场噩梦，一旦那样，漫长的人生就只能摩挲着自己的传说来度过，在也没有比那更无聊的人生了。”</p>
    </content>
  </entry>
  <entry>
    <title>《Football Hackers》读书笔记 03, 令人感动的创业故事</title>
    <link href="https://tanzhijian.org/posts/football_hackers_03"></link>
    <id>1677781646.9256816</id>
    <updated>2023-03-03T02:27:26Z</updated>
    <published>2023-03-03T02:27:26Z</published>
    <author><name>tanzhijian</name></author>
    <summary>这一章的标题叫 rise of the outsiders，局外人的崛起，从马修本纳姆开始说起，如果够专注英超会熟悉此人，布伦特福德俱乐部老板，同时还有两个身份，丹麦联赛中日德兰老板，以及博彩统计研究公司 Smartodds 创始人。关于他前期的赌徒生涯，包括在 Smartodds 从事的工作，本书最好的总结便是“信号与噪音”，信号是实质性的、有用的信息，噪音恰恰相反——这些数据不会告诉你任何事情，还可能会淹没信号。关于本书提到的他的几个观点很有意思：
</summary>
    <content type="html">
      <h1>《Football Hackers》读书笔记 03, 令人感动的创业故事</h1>
<p>这一章的标题叫 rise of the outsiders，局外人的崛起，从马修本纳姆开始说起，如果够专注英超会熟悉此人，布伦特福德俱乐部老板，同时还有两个身份，丹麦联赛中日德兰老板，以及博彩统计研究公司 Smartodds 创始人。关于他前期的赌徒生涯，包括在 Smartodds 从事的工作，本书最好的总结便是“信号与噪音”，信号是实质性的、有用的信息，噪音恰恰相反——这些数据不会告诉你任何事情，还可能会淹没信号。关于本书提到的他的几个观点很有意思：</p>
<p>2007 年的德甲冠军由该赛季第四好的球队斯图加特获得，2009 年是第三好的沃尔夫斯堡，他们的表现由我们非常精确地评估，确定他们成为第三或第四好的，剩下的就是运气了。</p>
<p>准确评估进球效率是所做一切的核心，由观察者在比赛中做笔记，以精确的精度对进球机会进行分类，这个方法在 2008 年就已经用于解决足球进球概率了，与这几年才兴起的 xG 预期进球相同逻辑，可能更甚一筹。</p>
<p>他的团队一直在寻找所谓的“可预测性”信息，譬如特定球员对球队表现的影响。如果一名重要球员不出场，他们可以以一定程度的信心降低获胜的概率，或者在他回来时升高。</p>
<p>如果一只球队客场距离比较近，那么他们的胜率会增加。赢得德比战比远赴比赛的机会更大。</p>
<p>双方历史对战结果被斥为噪音。他们与下一场比赛产生的具体结果并无关系，样本量太小，无法排除纯粹的随机性。</p>
<p>本汉姆不是唯一一个如此努力去预测结果的人，甚至不是最大的一个，还有一家叫 Starlizard 的公司，他的创始人可能更有名，托尼布鲁姆，布莱顿俱乐部老板，同样的赌徒背景，都购买了他们一生支持的俱乐部。这或许是局外人切入最好的方式？（笑）可以将多年的观察和结论付诸实践，有意识地努力不成为认知偏见的牺牲品，并试图利用他作为赌徒积累的大量知识，努力将足球的秘密转化为可靠的数字，他们已经建立了一个模型来确定最有用的球员。这本书出版于 2019 年，站在 2023 年的上帝视角来回看，布莱顿布伦特福德分别排在英超第八第九，已经用事实在阐述他们的成功了。</p>
<p>不过在本汉姆2012年接管布伦特福德后，他的想法并没有得到执行，英国足球，特别是较低级别的足球，是一件非常保守的事情：没有人敢尝试新事物。为了测试他的想法，他必须先去别的地方。也许一家外国俱乐部会对新颖的方法更开放？于是他收购了陷入危机的丹麦俱乐部中日德兰，开始采用分析驱动的决策方法，使用数据分析来识别有前途但价值被低估的转会，提高球队在定位球方面的表现，并优化球员个人的健康状况。比如 xG 的应用：对得分概率最高的射门位置进行研究，然后弄清楚如何将球到达那里。利用数据统计让球员相信 1:0 领先到最后十分钟增加一名前锋会降低对手得分几率，这种违反直觉的理由。</p>
<p>而他们最终在 2015 年获得了第一个联赛冠军。</p>
<p>我想讲的创业故事，来自这一章的第二节。</p>
<p>克里斯安德森对于很多人不熟悉，但提起他写过的一本书《数字游戏：关于足球，你全弄错了……吗？》可能会有些人知道，毕竟是为数不多几本有中文出版关于足球数据的书。康奈尔大学教授，教授政治经济学和政治社会学，一切都在 2009 年他读完《Moneyball》后改变了。</p>
<p>在 Moneyball 的兴趣推动下，他开始在互联网上搜索免费可用的比赛数据。他把数字下载到 Excel 表格中，并探讨相关性。起初这只是一点乐趣，一个四十多岁的人的爱好，他已经在学术和个人生活中实现了他想要的东西。只有少数人对他的经验分析感兴趣，但随着愈发深入，他作为社会科学家在“日常工作”中使用的分析工具可以轻松应用于足球数据，越多的人开始成为他的读者，他开始逐渐明确了一个理想：“成为足球的比利·比恩。“</p>
<p>但足球的创新，特别是以数据来推动创新，基本是由内行人来完成的，局外人如何切入，他没有足球背景，没有直接经验，几乎没有行业熟人。“纽约州的大学城伊萨卡，那里有红砖建筑、修剪整齐的草坪和古树的图片明信片校园。毫无疑问，这是一个贵族和阶级的地方，但几乎不具备发动足球革命的自然基础。”</p>
<p>他需要一个好计划。在他看来有两个因素是决定性的：他需要被认真对待；他必须想出一些真正改变比赛的东西，具有破坏性和令人印象深刻性，足以让潜在客户为此支付高额资金。</p>
<p>他决定先写一本书，“首先，它使我们能够进行广泛的研究，使我们能够更好地了解该行业、其人员及其动态。它还让我有机会向这些人证明数字可以显示非常有趣的东西。”他联系了 Opta 和 Prozone 等体育数据公司免费使用他们非常昂贵的数据，并承诺在书中对其价值进行宣传，他去了英国和德国的俱乐部，了解他们如何使用数据，2013 年书完成了，也就是前面提到的《数字游戏》。他们选择了首先在英国出版，如果在美国出版，就会变成一本来自美国的足球书籍，天生得不到重视（笑）。</p>
<p>计划的第一部分已经完成，人们确实认真对待他，他收获了一个有用的联系网络。</p>
<p>但随后他发现，在俱乐部内分析部门很难获得欣赏，许多较大的俱乐部，特别是英超俱乐部，确实投资了球探和数据分析师。但他们中的许多人似乎被录用只是因为他们的老板不想被指责为过时，在决策过程方面，这些人的工作充其量只是次要的作用。</p>
<p>试图说服俱乐部老板采纳他们的想法是没有意义的，必须找到愿意购买俱乐部的投资者，并从一开始就以不同的方式管理它。但也失败了，联赛有一种叫降级的东西，不仅会让俱乐部失去在联赛中的位置，重要的是会失去巨大一笔钱，还有巨大的声誉。</p>
<p>他在考文垂俱乐部获得了机会，与技术总监马克维纳斯一起工作。到这里大家可能认为一切都走向正轨，他会向前面两位那样改造球队成功。但生活中失败与妥协才是常态，他在管理中参与了太多不相关的琐事，这些才是俱乐部的真实面貌——数据战术只是很小的一部分。2015 年接任，俱乐部以第八名结束赛季，第二年出现了一些问题，他无法解决，于是认输离开俱乐部。</p>
<p>他想尝试来自外部的创新，局外人是否也能赢，他觉得这个概念非常浪漫。在考文垂之前他成立了一家咨询公司 Anderson and Sally，就经济和金融问题向足球俱乐部的投资者提供建议，尤其是希望其中一位投资者有足够的勇气，把钱花在外人身上。</p>
<p>我想起身边的许多局外人，安德森的经历不算出色，但比起他们足够幸运，但愿他们能在不具有包容性的时代，找到属于自己的角色。</p>
    </content>
  </entry>
  <entry>
    <title>《Football Hackers》读书笔记 02</title>
    <link href="https://tanzhijian.org/posts/football_hackers_02"></link>
    <id>1677073250.564302</id>
    <updated>2023-02-22T21:40:50Z</updated>
    <published>2023-02-22T21:40:50Z</published>
    <author><name>tanzhijian</name></author>
    <summary>这一章的主题围绕着 xG 和运气，探讨这二者的关系。14/15 赛季多特蒙德半赛季崩盘排名 17，克洛普随之在赛季结束离开，一个时代结束。一个叫 Colin Trainor 的分析师指出积分榜并没有反映出真实的情况，半个赛季的时候，多特蒙德的进球数应该是预期进球 25 个而不是真实进球数18，防守也没有 26 个失球表现的那么夸张，而只应该是预期失球 17 个，所以他们应该获得的预期积分是 30 分，不是实际得到的 15 分。如果是这样多特蒙德在积分榜上面的位置应该是第四名。
</summary>
    <content type="html">
      <h1>《Football Hackers》读书笔记 02</h1>
<h2>巧合的力量</h2>
<p>这一章的主题围绕着 xG 和运气，探讨这二者的关系。14/15 赛季多特蒙德半赛季崩盘排名 17，克洛普随之在赛季结束离开，一个时代结束。一个叫 Colin Trainor 的分析师指出积分榜并没有反映出真实的情况，半个赛季的时候，多特蒙德的进球数应该是预期进球 25 个而不是真实进球数18，防守也没有 26 个失球表现的那么夸张，而只应该是预期失球 17 个，所以他们应该获得的预期积分是 30 分，不是实际得到的 15 分。如果是这样多特蒙德在积分榜上面的位置应该是第四名。</p>
<p>但到底是什么导致 Trainor 大胆地声称这张积分榜本质上是错误的？为了理解他的方法，首先要认识到足球是一场概率游戏。没有人试图用坐在看台上的精确数字来量化进球机会。但是，由于匹配数据的激增，这样做实际上是可能的。</p>
<p>说一个直截了当的情况，点球。点球进球的几率是 76%，在大多数职业联赛中都能找到相同的比例，而扩展其他的位置射门，无处不在的数据收集使我们能够整理数千场比赛的数万次射门，查看它们在球场上的位置，并找到其中有多少造成了进球，这种收集为我们提供了一张运动场地图，可以相当精确的预测任何给定位置的射门进球的概率。</p>
<p>（暂时没找到合适的图床，就暂时不放图了，感兴趣自己的搜 xG map）</p>
<p>当然了，这张图仍然很初级，比如位于进攻球员和球门之间的防守球员数量位置也发挥了作用，他的数学模型还会更复杂一点，这是后话。</p>
<p>所以这样来理解 xg 就可以了，每次射门事件造成进球的概率，整场 xG 得分则是所有射门造成进球概率的相加。比如获得了一个点球，再加上一个范巴斯滕式小角度射门，<code>0.76 + 0.02</code>。</p>
<p>研究了C罗的一个案例，2010 年到 2017 年之间，C罗为在皇马除开点球的射门 1490 次，进球转化率为 13.3%，比联赛平均水平高出 2% 以上，但并不能说C罗是一个令人惊叹的优秀终结者，他射门比所有其他前锋都频繁得多：平均每场比赛近 7 次，这是一个令人难以置信的高数字。更重要的是他经常能在一些非常好的位置射门，也就是高 xG 值。豪无疑问除了很好的位置感，与他有非常好的队友帮助密不可分。</p>
<p>他每个赛季能进的球比普通前锋多 8 到 10 球，是占据了更好的射门位置，其他顶级前锋的数字也遵循类似的模式，他们名列前茅，因为他们经常射门，并且来自成功概率很高的位置。</p>
<p>预期进球存在不同的算法，而它本身也只表示基于算法的数学近似值，将预期目标视为比赛的“真实”结果是错误的。</p>
<p>接下来是 xGplots，把双方预期进球事件按照 90 分钟的横向时间轴来排列，以观察比赛的走势。(仍然没有图，准备补充一段代码来画但要之后来更新)</p>
<p>列举了几场比赛的 xGplots 后得出的结论：进球与预期进球事件是互相关联的，总的来说，符合中立者直观对一场比赛的体验。但将预期进球加在一起并不能反映到比赛结果中发挥作用的一些巧合事件，例如 18 年世界杯决赛，如果不考虑法国人的两个随机好运事件，克罗地亚实际上会在 xGs 中领先。</p>
<p>预期进球没有显示“真实”的结果。但提供了更清晰的游戏视图。</p>
<p>正如上一章提到的，对比起篮球，足球的单一事件对比赛结果影响占比过大，导致了足球场上的随机进球失球事件过于重要，所以足球从业人员的迷信程度相对较高，(???)我想起很早之前听一个做生意的朋友说起广东人迷信这件事，上班族几乎没有迷信的，过于稳定的收入被运气影响到的几率极小，而生意人会因为一两个决策承担严重的后果，所以会寄希望于获得好运气。大概放在足球上也如此。一些奇怪的癖好，一些奇怪的仪式。</p>
<p>负责自我评估自己表现的人容易出现称为自利偏见的认知错误。简而言之，我们很可能将成功归因于自己的技能和行动，而更愿意将失败归咎于不可控的外部因素，例如运气不佳或巧合。</p>
<p>但在足球中，这种现象呈现出一种有趣的逆向伪装。所有教练都知道随机性对比赛的影响，但公开哀叹运气不好被视为一种禁忌。暗示命运作用的解释总是必须承认有罪。</p>
<p>11/12赛季纽卡斯尔联队的故事。帕杜执教出人意料地在那个赛季获得了第 5 名，5 个净胜球，拿到了 65 个积分，而他们的射门次数差：主场平均 3.5，客场平均 -6.3，也就是每场比赛的射门次数都比对手少 1.4 次；下一个赛季有着类似的数量和质量，但他们在联赛跌倒 16 位；11/12 赛季他们的积分比预期积分多了 19 分，下一个赛季则少了 3 分。</p>
<p>还有更多的例子， 15/16赛季的莱斯特城比预期多了 12.06 分，第二名阿森纳则少了 6.01 分，一年后的切尔西比预期多了 17.26 分，曼城则少了 7.41 分，按照预期冠军的位置都应该调换，还有更多这样的例子。</p>
<p>回到开头，14/15 赛季的多特蒙德，在人员方面没有发生任何重大变化的情况下，打进了 29 个进球，丢了 16 球，赢得了 31 分——几乎与 Trainor 计算中上半赛季的得分完全相同。</p>
<p>他们不遗余力地试图根除糟糕结果的原因。但是，如果他们意识到当时有可能衡量巧合的影响，他和克洛普今天就不会在利物浦了。</p>
<p>Graham 在 2019 年 3 月的 OptaPro 会议上说：“我们真的认为多特蒙德运气不好。这与球员和教练的系统性问题无关。这真的很重要，因为俱乐部必须做出的最大战略决定之一是聘请一名新教练。如果我们想聘请克洛普，我们必须了解多特蒙德是否有问题。统计分析说得非常清楚和强烈：不。”</p>
    </content>
  </entry>
  <entry>
    <title>《Football Hackers》读书笔记 01</title>
    <link href="https://tanzhijian.org/posts/football_hackers_01"></link>
    <id>1677073125.7405462</id>
    <updated>2023-02-22T21:38:45Z</updated>
    <published>2023-02-22T21:38:45Z</published>
    <author><name>tanzhijian</name></author>
    <summary>去年读《莱斯特手稿》时我就在想，我也要像这样来写东西，现在总算能行动了。tanzhijian.org 以前也写了大概一百来篇博客，总是想着为别人读而写，想让别人读得舒服，尽可能的构思一些通俗易读不失优美的句子，但其实并没有多少人会读(笑)，对于我这样的非专业写作者，构思这些是一件很累的事情，很难坚持长久。所以这一次为自己写，整理思绪写得舒服，自己能看懂即可，看能坚持多久吧。
</summary>
    <content type="html">
      <h1>《Football Hackers》读书笔记 01</h1>
<p>去年读《莱斯特手稿》时我就在想，我也要像这样来写东西，现在总算能行动了。tanzhijian.org 以前也写了大概一百来篇博客，总是想着为别人读而写，想让别人读得舒服，尽可能的构思一些通俗易读不失优美的句子，但其实并没有多少人会读(笑)，对于我这样的非专业写作者，构思这些是一件很累的事情，很难坚持长久。所以这一次为自己写，整理思绪写得舒服，自己能看懂即可，看能坚持多久吧。</p>
<h2>序章</h2>
<p>从 2011 年巴萨对曼联华丽的欧冠决赛，谈到 2017 年伦敦的一场普通比赛，其变化在于工作空间内充满了各式各样的电脑屏幕，相机视角，监控传感器，场上的每一样动作都被瞬间捕捉，并且转换为可观测数据，且连接速度几乎也可以无缝。</p>
<p>八年前足球成为了数字游戏，但有一个问题是足球与数据关联不大（是吗？疑问）。到现在革命正在发生了，数据量与理解数据能力不断增加，有一句我很喜欢的话：“If you ignore it, you’ve only got yourself to blame. Whether we like it or not, the game has reached its digital tidal point.” 如果你忽略它，你只能怪自己，不管我们喜欢与否，数字足球已经来到了他的潮点。</p>
<p>接下来谈到了 Heimir Hallgrímsson，我不认识(笑)，于是查了一下，履历对比起名帅不漂亮，偏远俱乐部+小国国家队，用不大有天赋的球员，只有很少的钱，但可能传达了一个概念，这本书并不是以瓜迪奥拉这样的名帅视角来展开的，尽可能在小球队中获取到一些优势。但他正是通过数据与数字化在不断的旅途中找到了他的合适的搭档，一些特殊的，任性的，不寻常的人才。划重点，足球黑客，是那些颠覆系统并试图击败他的人。</p>
<p>足球的未来不是属于那些拥有最佳数据的人，而是那些从他们掌握的数据信息中得出最佳结论的人。</p>
<h2>第一章</h2>
<p>这一章的主题是错误判断(?)与认知偏见。足球是一项情感构成的游戏，争论也大多数由情感而不是事实决定的。伊比舍维奇可以在一场比赛中得到的评分由2分跨度到5分，那些跑得更多、冲刺次数更多、传球传球更好或射门更频繁的人赢得了更多的比赛吗？显然，这些参数都没有在统计学上证明，可以保证任何的胜利。</p>
<p>那是不是如果现有数据没有帮助球队赢得比赛的倾向，就需要找到新的和更好的数据呢，这里开始引出了 packing，那这个词就很熟悉了，我一直的理解是成功传球穿越对手的人头数，决定项有三，成功传球，成功接球，以及穿越对手。最好是同位置的球员相比，比说你的传球区域经常在前场。这项数据能够很好的描述托尼克罗斯这样的球员助攻不多，但是顶级传球手。而布莱顿则拥有多位 packing 很高的球员，所以这两年成绩非常优异。</p>
<p>认知偏见有一些很有意思的观点：</p>
<ul>
<li>
<p>如果球探去考察球员时事先参考了一些既定数据，是不是会影响对这名球员的判断呢</p>
</li>
<li>
<p>长期在温暖气候踢球的球员会不会高估自己去高寒地带的发挥呢</p>
</li>
<li>
<p>瓜迪奥拉那个位置换个人也能赢下比赛吗</p>
</li>
<li>
<p>如果连续两场比赛一支球队都在定位球上丢球是不是就可以认为他定位球防守差呢</p>
</li>
</ul>
<p>数据本身并不一定能带来更好的分析。相反，数据很容易引起更多的认知偏见。足球不像篮球，单一事件的重要性较低，足球的单一事件影响整个比赛进程的比重过高，使得认知偏见会严重影响判断。</p>
<p>大多数人倾向于将结果作为起点的判断解释，而不是教练的意图和策略。简而言之：如果结果是积极的，我们假设他的计划或赛前决定是正确的。然而如果结果是负面的，我们很快就会相信他的战术一定很糟糕。</p>
<p>很多人可能会说这是正确和合乎逻辑的。但这会忽视我们在足球中面临的下一个非常大的问题：表现和结果之间往往存在相当大的差距。</p>
    </content>
  </entry>
  <entry>
    <title>《Soccermatics》读书笔记 00</title>
    <link href="https://tanzhijian.org/posts/soccermatics00"></link>
    <id>1677073007.9952753</id>
    <updated>2023-02-22T21:36:47Z</updated>
    <published>2023-02-22T21:36:47Z</published>
    <author><name>tanzhijian</name></author>
    <summary>几年前在颜强老师那里听说了这本书，在之前只是零星琐碎的通过各种博客论坛文章中读到一些关于 xG，比赛热图的内容，由于常年关注此类数据，也算是个半吊子硬核球迷，大概知道这类数据的研究被用到各类比赛的进程推演以及复盘战术上。但总归是浅尝则止，所以当知道这本书的消息后便四方搜寻，最终在 Google Book 找到了刚发售的电子版（记得不是太清楚，印象中当时 Kindle 并没有找到）。
</summary>
    <content type="html">
      <h1>《Soccermatics》读书笔记 00</h1>
<p>几年前在颜强老师那里听说了这本书，在之前只是零星琐碎的通过各种博客论坛文章中读到一些关于 xG，比赛热图的内容，由于常年关注此类数据，也算是个半吊子硬核球迷，大概知道这类数据的研究被用到各类比赛的进程推演以及复盘战术上。但总归是浅尝则止，所以当知道这本书的消息后便四方搜寻，最终在 Google Book 找到了刚发售的电子版（记得不是太清楚，印象中当时 Kindle 并没有找到）。</p>
<p>以我半桶水不求甚解的英文能力，读这样一本随处可见俚语与术语的书籍实在是有些头大。只能是通过当时稍微有所改善但仍是不堪大用的机器翻译引擎过上一遍，然后粘贴到笔记本，再对照原文开始调整词序，校对词义，以求理解起来不至于出现偏差。如此一个多月下来竟然读完了，这也是我从头完整到尾读过的第一本英文书。</p>
<p>后来我开始从事足球数据的工作，回想起来大致与此书也有些相关性。一本书其实不读也没多大关系，但是读过了，就很难再想象没读过它自己的人生会是什么样子。这可能就是对自己来说“偶然而又关键的事”。</p>
<p>倒不是说这本书有多好，这甚至算不上一本严肃的知识传播书籍。是的，它并不严肃，数据引用的覆盖面不够，多样性也不够，大部分只是为了佐证自己观点的相关数据，得出的结论也不甚满意，大多是些探讨性的开放结论。</p>
<p>但这样去苛求一本书未免不现实，总不能让人把完全正确又尘埃落定的答案捧到面前，拿去用便是。要是果真如此，这个世界上只怕没有几本书能用得上。</p>
<p>我曾与一个同事说过，一本书大概只要满足有一两页能够提供到新的内容，那这本书就是值得的。毕竟这个世界上怎会有那么多新内容，大多不过是把别人嚼烂的东西再嚼一遍。而大多的书只需要遍历一次内容，记住它的目录，以后要用到时知道在曾经哪本书看到过，并且能够索引到，做到这一点足以。</p>
<p>闲话休提，说回这本书。</p>
<p>无论是运气好坏，这段时间总算是从高强度开发节奏中暂停了出来，带来的好处是时间变慢了，有大量的空闲可以用来整理和重构代码，生活，和知识结构。其中便包括重新读一遍这本书。它曾经带给我对于足球与现实世界之间相关性的大量方法思路，值得再读。一定有什么曾经忽略了的东西，对此我深信不疑。</p>
<blockquote>
<p>我从来不做任何预测，也永远不会这样做。</p>
</blockquote>
<p>这是第一章的标题，出自英格兰名宿，传奇中场林皇——哈哈串戏了，出自保罗加斯科因之口。这句话正如他的人生，前半句代表了他放荡不羁的过去，而后半句代表了他毫无规划的未来。而他一直不曾面对的，一些关于生活深刻的事实：任何事情都有可以找到的模式。</p>
<p>一旦找到了模式，便可以做出预测。</p>
<p>写到这里我发觉，还是得有一些准备工作，才能继续：</p>
<ul>
<li>
<p>一个可靠的数据源，能够提供书中所提到的各类数据。由于后面几章数据不是非常的规范，大概率需要自己手动爬取整合</p>
</li>
<li>
<p>一个能够在 GitHub Pages 使用的 JavaScript 可视化图表的库</p>
</li>
<li>
<p>如果没有能使用的可视化库，则需要一个图床</p>
</li>
</ul>
<p>把准备工作先做了。</p>
    </content>
  </entry>
  <entry>
    <title>随便写，随便看 01</title>
    <link href="https://tanzhijian.org/posts/dev01"></link>
    <id>1677072862.7375624</id>
    <updated>2023-02-22T21:34:22Z</updated>
    <published>2023-02-22T21:34:22Z</published>
    <author><name>tanzhijian</name></author>
    <summary>又一次在模型调试不顺利发生争吵后忘记关闭微信语音，独自整理着愈发庞大的代码库。片刻之后合伙人问我：“失望吗？”
</summary>
    <content type="html">
      <h2>随便写，随便看 01</h2>
<p>又一次在模型调试不顺利发生争吵后忘记关闭微信语音，独自整理着愈发庞大的代码库。片刻之后合伙人问我：“失望吗？”</p>
<p>我说：“还好吧，有点难过，但也不至于失望。”</p>
<p>不知道为什么，当我每天面对这堆代码库的时候，脑海里总会把它想象成一部巨大的机器。具体来说，他头部的几个部件暴露在外，这些部件由我拼接，像乐高积木一样——身处当下这个时代的优势，几乎可以在全球范围内找到想要使用的任何部件，然后写很少的代码把它们拼接在一起。这便是我的主要工作，得心应手，但也仅此而已。这部机器的绝大多数被封装在若干个黑盒子里形成中下部，对他们的了解仅限于一些连绵不断的术语，试图去了解具体组件的流程却发现每一个都像一座迷宫。“完全不明白是如何工作的。”对此只能战战兢兢，期待着每一次的输入输出都如约而至，能够随时保持着更新，同时性能不会有纰漏。</p>
<p>所幸运气还不错，一直以来都能与不同行业的人打交道，纵然不是每个人都令我仰慕钦佩，但大多数至少都是让人尊敬的出色人物。更加幸运的是，总能在困难时刻得到他们中一些有意无意的，或是提点或是帮助，有时还会加入到工作。黑盒子便大致以这样微妙的方式，协同整部机器有序运作起来。</p>
<p>但是没有机器能理解具有无限变量的运动，在这种运动中，情感起着根本性作用，而随机性将随着比赛进程一直存在。</p>
<p>我们捕捉了社交媒体和新闻的大多数主观情感内容，这与比赛的主观情感只存在相关性，并没有什么因果关系。我们捕捉了尽量多的比赛特征，把比赛对抗模拟成矩阵乘法进入神经网络迭代，可又有多少特征没被捕捉到，真的是这些特征决定的比赛走向吗？没有上下文的数据没有任何意义。</p>
<blockquote>
<p>只是再怎么模拟，也无法实现真正意义上的数字孪生，因为数字化的成本超出了这个世界的承受能力。必须做一定程度的抽象，不能基于因果律和牛顿的机械宇宙观来做，因此精确的数字孪生是不存在的，一切都是概率和规律。但在模拟解决现实世界预测问题的同时，则可以沉淀出我们真正需要的计算系统。</p>
<p><a href="https://mp.weixin.qq.com/s/DfYTxdWx8vC7X80gyeEgLw">《聊聊我要做的计算》</a></p>
</blockquote>
<p>一切都是概率和规律。</p>
<p>年龄增长带来的好事，便是不大在乎得失带来的情绪，而更在乎得失带来的收益。以前看不到的东西现在可以看到了，不明白的东西现在弄明白了，这无论如何都谈不上失望，倒像是人生中白捡了一个便宜。只是接下来又有更多的工作要做了。</p>
    </content>
  </entry>
  
</feed>